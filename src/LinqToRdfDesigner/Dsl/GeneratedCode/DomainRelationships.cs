//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship Association
	/// Associations between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.Association.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.Association.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("d19c58ca-ae26-4779-be84-efe58cbaedba")]
	public abstract partial class Association : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Association domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd19c58ca, 0xae26, 0x4779, 0xbe, 0x84, 0xef, 0xe5, 0x8c, 0xba, 0xed, 0xba);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected Association(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xa25d1137, 0x197a, 0x43a5, 0x8b, 0xb7, 0x9f, 0x1c, 0x99, 0x4d, 0xf5, 0x58);
		
		/// <summary>
		/// DomainRole Source
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Association/Source.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Association/Source.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="LinqToRdf.Designer.Association/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a25d1137-197a-43a5-8bb7-9f1c994df558")]
		public abstract ModelClass Source
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Sources of a ModelClass
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetSources(ModelClass element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xd6e9c441, 0x5559, 0x4bf1, 0x83, 0xc4, 0x48, 0x1b, 0x10, 0x2c, 0x87, 0xa1);
		
		/// <summary>
		/// DomainRole Target
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Association/Target.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Association/Target.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="LinqToRdf.Designer.Association/Target.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d6e9c441-5559-4bf1-83c4-481b102c87a1")]
		public abstract ModelClass Target
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Targets of a ModelClass
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetTargets(ModelClass element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(element, SourceDomainRoleId);
		}
		#endregion
		#region SourceMultiplicity domain property code
		
		/// <summary>
		/// SourceMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceMultiplicityDomainPropertyId = new global::System.Guid(0xb46de540, 0xbd13, 0x424d, 0xbc, 0x4a, 0x13, 0x60, 0xd9, 0x68, 0x29, 0xb4);
		
		/// <summary>
		/// Storage for SourceMultiplicity
		/// </summary>
		private Multiplicity sourceMultiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of SourceMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Association/SourceMultiplicity.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Association/SourceMultiplicity.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b46de540-bd13-424d-bc4a-1360d96829b4")]
		public Multiplicity SourceMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceMultiplicity domain property.
		/// </summary>
		internal sealed partial class SourceMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private SourceMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceMultiplicity domain property value handler.
			/// </summary>
			public static readonly SourceMultiplicityPropertyHandler Instance = new SourceMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceRoleName domain property code
		
		/// <summary>
		/// SourceRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceRoleNameDomainPropertyId = new global::System.Guid(0x40c5bfd2, 0xc8a9, 0x4a1a, 0xbc, 0x9c, 0x74, 0x92, 0xc9, 0x3c, 0xbf, 0xf5);
		
		/// <summary>
		/// Storage for SourceRoleName
		/// </summary>
		private global::System.String sourceRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Association/SourceRoleName.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Association/SourceRoleName.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("40c5bfd2-c8a9-4a1a-bc9c-7492c93cbff5")]
		public global::System.String SourceRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceRoleName domain property.
		/// </summary>
		internal sealed partial class SourceRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private SourceRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceRoleName domain property value handler.
			/// </summary>
			public static readonly SourceRoleNamePropertyHandler Instance = new SourceRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetMultiplicity domain property code
		
		/// <summary>
		/// TargetMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetMultiplicityDomainPropertyId = new global::System.Guid(0x311a3aaf, 0x10f0, 0x4e63, 0x90, 0x5a, 0x33, 0xc4, 0x0e, 0xcf, 0x41, 0xfe);
		
		/// <summary>
		/// Storage for TargetMultiplicity
		/// </summary>
		private Multiplicity targetMultiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of TargetMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Association/TargetMultiplicity.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Association/TargetMultiplicity.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("311a3aaf-10f0-4e63-905a-33c40ecf41fe")]
		public Multiplicity TargetMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetMultiplicity domain property.
		/// </summary>
		internal sealed partial class TargetMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private TargetMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetMultiplicity domain property value handler.
			/// </summary>
			public static readonly TargetMultiplicityPropertyHandler Instance = new TargetMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetRoleName domain property code
		
		/// <summary>
		/// TargetRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleNameDomainPropertyId = new global::System.Guid(0xd6afbd33, 0xf3fc, 0x4188, 0x96, 0x2e, 0xe5, 0x50, 0x13, 0xcd, 0x06, 0xa1);
		
		/// <summary>
		/// Storage for TargetRoleName
		/// </summary>
		private global::System.String targetRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Association/TargetRoleName.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Association/TargetRoleName.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("d6afbd33-f3fc-4188-962e-e55013cd06a1")]
		public global::System.String TargetRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetRoleName domain property.
		/// </summary>
		internal sealed partial class TargetRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetRoleName domain property value handler.
			/// </summary>
			public static readonly TargetRoleNamePropertyHandler Instance = new TargetRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ResourceUri domain property code
		
		/// <summary>
		/// ResourceUri domain property Id.
		/// </summary>
		public static readonly global::System.Guid ResourceUriDomainPropertyId = new global::System.Guid(0xff8e8c64, 0x1576, 0x4f98, 0xb1, 0x6c, 0x80, 0x96, 0x09, 0xf5, 0x8d, 0x87);
		
		/// <summary>
		/// Storage for ResourceUri
		/// </summary>
		private global::System.String resourceUriPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ResourceUri domain property.
		/// Description for LinqToRdf.Designer.Association.Resource Uri
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Association/ResourceUri.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Association/ResourceUri.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ff8e8c64-1576-4f98-b16c-809609f58d87")]
		public global::System.String ResourceUri
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return resourceUriPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ResourceUriPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.ResourceUri domain property.
		/// </summary>
		internal sealed partial class ResourceUriPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private ResourceUriPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.ResourceUri domain property value handler.
			/// </summary>
			public static readonly ResourceUriPropertyHandler Instance = new ResourceUriPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.ResourceUri domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ResourceUriDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.resourceUriPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.resourceUriPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Association> GetLinksToTargets ( global::LinqToRdf.Designer.ModelClass sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Association>(sourceInstance, global::LinqToRdf.Designer.Association.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Association> GetLinksToSources ( global::LinqToRdf.Designer.ModelClass targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Association>(targetInstance, global::LinqToRdf.Designer.Association.TargetDomainRoleId);
		}
		#endregion
		#region Association instance accessors
		
		/// <summary>
		/// Get any Association links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Association> GetLinks( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.Association> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.Association>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.Association> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Association>(source, global::LinqToRdf.Designer.Association.SourceDomainRoleId);
			foreach ( global::LinqToRdf.Designer.Association link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship UnidirectionalAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.UnidirectionalAssociation.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.UnidirectionalAssociation.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("f9c75c31-4a31-46d4-b7d1-b0054836f51f")]
	public partial class UnidirectionalAssociation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UnidirectionalAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf9c75c31, 0x4a31, 0x46d4, 0xb7, 0xd1, 0xb0, 0x05, 0x48, 0x36, 0xf5, 0x1f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UnidirectionalAssociation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public UnidirectionalAssociation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UnidirectionalAssociation.UnidirectionalSourceDomainRoleId, source), new DslModeling::RoleAssignment(UnidirectionalAssociation.UnidirectionalTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnidirectionalAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnidirectionalAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnidirectionalAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnidirectionalAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UnidirectionalSource domain role code
		
		/// <summary>
		/// UnidirectionalSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnidirectionalSourceDomainRoleId = new global::System.Guid(0x44b7f53a, 0x5a68, 0x4e28, 0x90, 0x8a, 0xc4, 0x10, 0x79, 0xfa, 0xb8, 0xa9);
		
		/// <summary>
		/// DomainRole UnidirectionalSource
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.UnidirectionalAssociation/UnidirectionalSource.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.UnidirectionalAssociation/UnidirectionalSource.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UnidirectionalTargets", PropertyDisplayNameKey="LinqToRdf.Designer.UnidirectionalAssociation/UnidirectionalSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("44b7f53a-5a68-4e28-908a-c41079fab8a9")]
		public virtual ModelClass UnidirectionalSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnidirectionalSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnidirectionalSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnidirectionalSources of a ModelClass
		/// <summary>
		/// Gets a list of UnidirectionalSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetUnidirectionalSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, UnidirectionalTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing UnidirectionalSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.UnidirectionalSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.UnidirectionalSource = value;
			}
		}
		
		#endregion
		#region UnidirectionalTarget domain role code
		
		/// <summary>
		/// UnidirectionalTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnidirectionalTargetDomainRoleId = new global::System.Guid(0x6e4ba4a4, 0x395e, 0x4550, 0xb5, 0xaa, 0x50, 0xbc, 0xbf, 0x5d, 0x82, 0x53);
		
		/// <summary>
		/// DomainRole UnidirectionalTarget
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.UnidirectionalAssociation/UnidirectionalTarget.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.UnidirectionalAssociation/UnidirectionalTarget.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UnidirectionalSources", PropertyDisplayNameKey="LinqToRdf.Designer.UnidirectionalAssociation/UnidirectionalTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6e4ba4a4-395e-4550-b5aa-50bcbf5d8253")]
		public virtual ModelClass UnidirectionalTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnidirectionalTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnidirectionalTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnidirectionalTargets of a ModelClass
		/// <summary>
		/// Gets a list of UnidirectionalTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetUnidirectionalTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, UnidirectionalSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing UnidirectionalTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.UnidirectionalTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.UnidirectionalTarget = value;
			}
		}
		
		#endregion
		#region UnidirectionalSource link accessor
		/// <summary>
		/// Get the list of UnidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.UnidirectionalAssociation> GetLinksToUnidirectionalTargets ( global::LinqToRdf.Designer.ModelClass unidirectionalSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.UnidirectionalAssociation>(unidirectionalSourceInstance, global::LinqToRdf.Designer.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
		}
		#endregion
		#region UnidirectionalTarget link accessor
		/// <summary>
		/// Get the list of UnidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.UnidirectionalAssociation> GetLinksToUnidirectionalSources ( global::LinqToRdf.Designer.ModelClass unidirectionalTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.UnidirectionalAssociation>(unidirectionalTargetInstance, global::LinqToRdf.Designer.UnidirectionalAssociation.UnidirectionalTargetDomainRoleId);
		}
		#endregion
		#region UnidirectionalAssociation instance accessors
		
		/// <summary>
		/// Get any UnidirectionalAssociation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.UnidirectionalAssociation> GetLinks( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.UnidirectionalAssociation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.UnidirectionalAssociation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.UnidirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.UnidirectionalAssociation>(source, global::LinqToRdf.Designer.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
			foreach ( global::LinqToRdf.Designer.UnidirectionalAssociation link in links )
			{
				if ( target.Equals(link.UnidirectionalTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship ClassHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.ClassHasAttributes.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.ClassHasAttributes.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a0b6f712-97a8-4aa3-8f7b-58254daba566")]
	public partial class ClassHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa0b6f712, 0x97a8, 0x4aa3, 0x8f, 0x7b, 0x58, 0x25, 0x4d, 0xab, 0xa5, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasAttributes link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelAttribute to use as the target of the relationship.</param>
		public ClassHasAttributes(ModelClass source, ModelAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasAttributes.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x182a6dd9, 0xda20, 0x4198, 0xad, 0x27, 0x04, 0xfc, 0x04, 0x4e, 0x4d, 0xdc);
		
		/// <summary>
		/// DomainRole ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.ClassHasAttributes/ModelClass.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.ClassHasAttributes/ModelClass.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="LinqToRdf.Designer.ClassHasAttributes/ModelClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("182a6dd9-da20-4198-ad27-04fc044e4ddc")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a ModelAttribute
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(ModelAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(ModelAttribute element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newModelClass);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x57f14e10, 0xbfa7, 0x43c5, 0xbb, 0xb9, 0xcd, 0xdd, 0xde, 0x7f, 0x12, 0x56);
		
		/// <summary>
		/// DomainRole Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.ClassHasAttributes/Attribute.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.ClassHasAttributes/Attribute.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="LinqToRdf.Designer.ClassHasAttributes/Attribute.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("57f14e10-bfa7-43c5-bbb9-cdddde7f1256")]
		public virtual ModelAttribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a ModelClass
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelAttribute> GetAttributes(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelAttribute>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasAttributes links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.ClassHasAttributes> GetLinksToAttributes ( global::LinqToRdf.Designer.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ClassHasAttributes>(modelClassInstance, global::LinqToRdf.Designer.ClassHasAttributes.ModelClassDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the ClassHasAttributes link to a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.ClassHasAttributes GetLinkToModelClass (global::LinqToRdf.Designer.ModelAttribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ClassHasAttributes>(attributeInstance, global::LinqToRdf.Designer.ClassHasAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasAttributes instance accessors
		
		/// <summary>
		/// Get any ClassHasAttributes links between a given ModelClass and a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.ClassHasAttributes> GetLinks( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ModelAttribute target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.ClassHasAttributes> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.ClassHasAttributes>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ClassHasAttributes>(source, global::LinqToRdf.Designer.ClassHasAttributes.ModelClassDomainRoleId);
			foreach ( global::LinqToRdf.Designer.ClassHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasAttributes link between a given ModelClassand a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.ClassHasAttributes GetLink( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ModelAttribute target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ClassHasAttributes>(source, global::LinqToRdf.Designer.ClassHasAttributes.ModelClassDomainRoleId);
			foreach ( global::LinqToRdf.Designer.ClassHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.ModelRootHasComments.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.ModelRootHasComments.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("406f5aba-700c-42a8-b145-aa3ae4e06cb2")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x406f5aba, 0x700c, 0x42a8, 0xb1, 0x45, 0xaa, 0x3a, 0xe4, 0xe0, 0x6c, 0xb2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xde2eac8f, 0x6c0d, 0x4133, 0xbf, 0x99, 0xba, 0xe0, 0x76, 0x9d, 0x09, 0xc9);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.ModelRootHasComments/ModelRoot.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="LinqToRdf.Designer.ModelRootHasComments/ModelRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("de2eac8f-6c0d-4133-bf99-bae0769d09c9")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModelRoot);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x59533f8a, 0x175a, 0x410b, 0xbf, 0xdc, 0x87, 0x2e, 0xaf, 0x7f, 0x89, 0x28);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.ModelRootHasComments/Comment.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.ModelRootHasComments/Comment.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="LinqToRdf.Designer.ModelRootHasComments/Comment.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("59533f8a-175a-410b-bfdc-872eaf7f8928")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.ModelRootHasComments> GetLinksToComments ( global::LinqToRdf.Designer.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ModelRootHasComments>(modelRootInstance, global::LinqToRdf.Designer.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.ModelRootHasComments GetLinkToModelRoot (global::LinqToRdf.Designer.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ModelRootHasComments>(commentInstance, global::LinqToRdf.Designer.ModelRootHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.ModelRootHasComments> GetLinks( global::LinqToRdf.Designer.ModelRoot source, global::LinqToRdf.Designer.Comment target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ModelRootHasComments>(source, global::LinqToRdf.Designer.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::LinqToRdf.Designer.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.ModelRootHasComments GetLink( global::LinqToRdf.Designer.ModelRoot source, global::LinqToRdf.Designer.Comment target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ModelRootHasComments>(source, global::LinqToRdf.Designer.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::LinqToRdf.Designer.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship ClassHasOperations
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.ClassHasOperations.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.ClassHasOperations.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("40280eee-9add-4a1a-82d7-b2379f013056")]
	public partial class ClassHasOperations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasOperations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x40280eee, 0x9add, 0x4a1a, 0x82, 0xd7, 0xb2, 0x37, 0x9f, 0x01, 0x30, 0x56);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasOperations link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ClassOperation to use as the target of the relationship.</param>
		public ClassHasOperations(ModelClass source, ClassOperation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasOperations.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasOperations.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasOperations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasOperations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasOperations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasOperations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x54e9559a, 0xf1a2, 0x4974, 0xae, 0x81, 0x2a, 0x2a, 0xc2, 0x27, 0xa6, 0xac);
		
		/// <summary>
		/// DomainRole ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.ClassHasOperations/ModelClass.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.ClassHasOperations/ModelClass.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operations", PropertyDisplayNameKey="LinqToRdf.Designer.ClassHasOperations/ModelClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("54e9559a-f1a2-4974-ae81-2a2ac227a6ac")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a ClassOperation
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(ClassOperation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(ClassOperation element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newModelClass);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0xc42b379b, 0x80d8, 0x4cd9, 0xb9, 0x2e, 0x25, 0xbf, 0xd0, 0x86, 0x57, 0xc7);
		
		/// <summary>
		/// DomainRole Operation
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.ClassHasOperations/Operation.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.ClassHasOperations/Operation.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="LinqToRdf.Designer.ClassHasOperations/Operation.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c42b379b-80d8-4cd9-b92e-25bfd08657c7")]
		public virtual ClassOperation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassOperation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a ModelClass
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClassOperation> GetOperations(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ClassOperation>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasOperations links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.ClassHasOperations> GetLinksToOperations ( global::LinqToRdf.Designer.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ClassHasOperations>(modelClassInstance, global::LinqToRdf.Designer.ClassHasOperations.ModelClassDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the ClassHasOperations link to a ClassOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.ClassHasOperations GetLinkToModelClass (global::LinqToRdf.Designer.ClassOperation operationInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ClassHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ClassHasOperations>(operationInstance, global::LinqToRdf.Designer.ClassHasOperations.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasOperations instance accessors
		
		/// <summary>
		/// Get any ClassHasOperations links between a given ModelClass and a ClassOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.ClassHasOperations> GetLinks( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ClassOperation target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.ClassHasOperations> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.ClassHasOperations>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ClassHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ClassHasOperations>(source, global::LinqToRdf.Designer.ClassHasOperations.ModelClassDomainRoleId);
			foreach ( global::LinqToRdf.Designer.ClassHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasOperations link between a given ModelClassand a ClassOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.ClassHasOperations GetLink( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ClassOperation target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ClassHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ClassHasOperations>(source, global::LinqToRdf.Designer.ClassHasOperations.ModelClassDomainRoleId);
			foreach ( global::LinqToRdf.Designer.ClassHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship Generalization
	/// Inheritance between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.Generalization.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.Generalization.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f43c1371-d2a7-4b2b-ac8c-ef7bf177bba4")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf43c1371, 0xd2a7, 0x4b2b, 0xac, 0x8c, 0xef, 0x7b, 0xf1, 0x77, 0xbb, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Generalization(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubclassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0xb1b5020e, 0xea6a, 0x4dfd, 0x92, 0x47, 0xfa, 0x40, 0x91, 0x71, 0xeb, 0x66);
		
		/// <summary>
		/// DomainRole Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Generalization/Superclass.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Generalization/Superclass.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="LinqToRdf.Designer.Generalization/Superclass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b1b5020e-ea6a-4dfd-9247-fa409171eb66")]
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Superclass of a ModelClass
		/// <summary>
		/// Gets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetSuperclass(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperclass(ModelClass element, ModelClass newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclass domain role code
		
		/// <summary>
		/// Subclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassDomainRoleId = new global::System.Guid(0x854a2837, 0xc514, 0x446a, 0x87, 0x41, 0xa0, 0xeb, 0xc8, 0x75, 0xac, 0xc8);
		
		/// <summary>
		/// DomainRole Subclass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Generalization/Subclass.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Generalization/Subclass.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Superclass", PropertyDisplayNameKey="LinqToRdf.Designer.Generalization/Subclass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("854a2837-c514-446a-8741-a0ebc875acc8")]
		public virtual ModelClass Subclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a ModelClass
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetSubclasses(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Discriminator domain property code
		
		/// <summary>
		/// Discriminator domain property Id.
		/// </summary>
		public static readonly global::System.Guid DiscriminatorDomainPropertyId = new global::System.Guid(0x57d56760, 0x7824, 0x4ec4, 0xb1, 0x5a, 0x2b, 0x5a, 0x2d, 0x1e, 0xa7, 0xb6);
		
		/// <summary>
		/// Storage for Discriminator
		/// </summary>
		private global::System.String discriminatorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Discriminator domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Generalization/Discriminator.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Generalization/Discriminator.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("57d56760-7824-4ec4-b15a-2b5a2d1ea7b6")]
		public global::System.String Discriminator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return discriminatorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DiscriminatorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Generalization.Discriminator domain property.
		/// </summary>
		internal sealed partial class DiscriminatorPropertyHandler : DslModeling::DomainPropertyValueHandler<Generalization, global::System.String>
		{
			private DiscriminatorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Generalization.Discriminator domain property value handler.
			/// </summary>
			public static readonly DiscriminatorPropertyHandler Instance = new DiscriminatorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Generalization.Discriminator domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DiscriminatorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Generalization element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.discriminatorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Generalization element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.discriminatorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Generalization links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Generalization> GetLinksToSubclasses ( global::LinqToRdf.Designer.ModelClass superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Generalization>(superclassInstance, global::LinqToRdf.Designer.Generalization.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclass link accessor
		/// <summary>
		/// Get the Generalization link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.Generalization GetLinkToSuperclass (global::LinqToRdf.Designer.ModelClass subclassInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Generalization>(subclassInstance, global::LinqToRdf.Designer.Generalization.SubclassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Generalization> GetLinks( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.Generalization> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.Generalization>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Generalization>(source, global::LinqToRdf.Designer.Generalization.SuperclassDomainRoleId);
			foreach ( global::LinqToRdf.Designer.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given ModelClassand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.Generalization GetLink( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Generalization>(source, global::LinqToRdf.Designer.Generalization.SuperclassDomainRoleId);
			foreach ( global::LinqToRdf.Designer.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship BidirectionalAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.BidirectionalAssociation.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.BidirectionalAssociation.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("cb2482ea-daff-4039-813a-16208766ca7c")]
	public partial class BidirectionalAssociation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BidirectionalAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcb2482ea, 0xdaff, 0x4039, 0x81, 0x3a, 0x16, 0x20, 0x87, 0x66, 0xca, 0x7c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BidirectionalAssociation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public BidirectionalAssociation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BidirectionalAssociation.BidirectionalSourceDomainRoleId, source), new DslModeling::RoleAssignment(BidirectionalAssociation.BidirectionalTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BidirectionalAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BidirectionalAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BidirectionalAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BidirectionalAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BidirectionalSource domain role code
		
		/// <summary>
		/// BidirectionalSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalSourceDomainRoleId = new global::System.Guid(0xd592f493, 0x05c0, 0x46af, 0x8f, 0x6b, 0x2c, 0xbf, 0xa8, 0x14, 0x35, 0xc3);
		
		/// <summary>
		/// DomainRole BidirectionalSource
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.BidirectionalAssociation/BidirectionalSource.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.BidirectionalAssociation/BidirectionalSource.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BidirectionalTargets", PropertyDisplayNameKey="LinqToRdf.Designer.BidirectionalAssociation/BidirectionalSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d592f493-05c0-46af-8f6b-2cbfa81435c3")]
		public virtual ModelClass BidirectionalSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BidirectionalSources of a ModelClass
		/// <summary>
		/// Gets a list of BidirectionalSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetBidirectionalSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalSource = value;
			}
		}
		
		#endregion
		#region BidirectionalTarget domain role code
		
		/// <summary>
		/// BidirectionalTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalTargetDomainRoleId = new global::System.Guid(0xc4e9d5f0, 0x0386, 0x45ae, 0xbc, 0xe4, 0xc3, 0xf8, 0x34, 0x7f, 0xa7, 0x26);
		
		/// <summary>
		/// DomainRole BidirectionalTarget
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.BidirectionalAssociation/BidirectionalTarget.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.BidirectionalAssociation/BidirectionalTarget.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BidirectionalSources", PropertyDisplayNameKey="LinqToRdf.Designer.BidirectionalAssociation/BidirectionalTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c4e9d5f0-0386-45ae-bce4-c3f8347fa726")]
		public virtual ModelClass BidirectionalTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BidirectionalTargets of a ModelClass
		/// <summary>
		/// Gets a list of BidirectionalTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetBidirectionalTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalTarget = value;
			}
		}
		
		#endregion
		#region BidirectionalSource link accessor
		/// <summary>
		/// Get the list of BidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.BidirectionalAssociation> GetLinksToBidirectionalTargets ( global::LinqToRdf.Designer.ModelClass bidirectionalSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.BidirectionalAssociation>(bidirectionalSourceInstance, global::LinqToRdf.Designer.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region BidirectionalTarget link accessor
		/// <summary>
		/// Get the list of BidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.BidirectionalAssociation> GetLinksToBidirectionalSources ( global::LinqToRdf.Designer.ModelClass bidirectionalTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.BidirectionalAssociation>(bidirectionalTargetInstance, global::LinqToRdf.Designer.BidirectionalAssociation.BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region BidirectionalAssociation instance accessors
		
		/// <summary>
		/// Get any BidirectionalAssociation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.BidirectionalAssociation> GetLinks( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.BidirectionalAssociation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.BidirectionalAssociation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.BidirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.BidirectionalAssociation>(source, global::LinqToRdf.Designer.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
			foreach ( global::LinqToRdf.Designer.BidirectionalAssociation link in links )
			{
				if ( target.Equals(link.BidirectionalTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship InterfaceHasOperation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.InterfaceHasOperation.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.InterfaceHasOperation.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4fda0883-e48d-4d14-b382-f69074c9f798")]
	public partial class InterfaceHasOperation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InterfaceHasOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4fda0883, 0xe48d, 0x4d14, 0xb3, 0x82, 0xf6, 0x90, 0x74, 0xc9, 0xf7, 0x98);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InterfaceHasOperation link in the same Partition as the given ModelInterface
		/// </summary>
		/// <param name="source">ModelInterface to use as the source of the relationship.</param>
		/// <param name="target">InterfaceOperation to use as the target of the relationship.</param>
		public InterfaceHasOperation(ModelInterface source, InterfaceOperation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InterfaceHasOperation.InterfaceDomainRoleId, source), new DslModeling::RoleAssignment(InterfaceHasOperation.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceHasOperation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceHasOperation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceHasOperation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceHasOperation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Interface domain role code
		
		/// <summary>
		/// Interface domain role Id.
		/// </summary>
		public static readonly global::System.Guid InterfaceDomainRoleId = new global::System.Guid(0x5adcdb40, 0x518e, 0x4a21, 0x92, 0xb6, 0xf2, 0xe8, 0x38, 0xf5, 0xbd, 0x69);
		
		/// <summary>
		/// DomainRole Interface
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.InterfaceHasOperation/Interface.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.InterfaceHasOperation/Interface.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operations", PropertyDisplayNameKey="LinqToRdf.Designer.InterfaceHasOperation/Interface.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5adcdb40-518e-4a21-92b6-f2e838f5bd69")]
		public virtual ModelInterface Interface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelInterface)DslModeling::DomainRoleInfo.GetRolePlayer(this, InterfaceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InterfaceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Interface of a InterfaceOperation
		/// <summary>
		/// Gets Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelInterface GetInterface(InterfaceOperation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as ModelInterface;
		}
		
		/// <summary>
		/// Sets Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInterface(InterfaceOperation element, ModelInterface newInterface)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newInterface);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0xc9e8538e, 0x7efd, 0x4767, 0x9a, 0xba, 0x82, 0xee, 0xa6, 0x5e, 0x38, 0x2d);
		
		/// <summary>
		/// DomainRole Operation
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.InterfaceHasOperation/Operation.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.InterfaceHasOperation/Operation.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Interface", PropertyDisplayNameKey="LinqToRdf.Designer.InterfaceHasOperation/Operation.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("c9e8538e-7efd-4767-9aba-82eea65e382d")]
		public virtual InterfaceOperation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InterfaceOperation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a ModelInterface
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InterfaceOperation> GetOperations(ModelInterface element)
		{
			return new DslModeling::LinkedElementCollection<InterfaceOperation>(element, InterfaceDomainRoleId);
		}
		#endregion
		#region Interface link accessor
		/// <summary>
		/// Get the list of InterfaceHasOperation links to a ModelInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.InterfaceHasOperation> GetLinksToOperations ( global::LinqToRdf.Designer.ModelInterface interfaceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.InterfaceHasOperation>(interfaceInstance, global::LinqToRdf.Designer.InterfaceHasOperation.InterfaceDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the InterfaceHasOperation link to a InterfaceOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.InterfaceHasOperation GetLinkToInterface (global::LinqToRdf.Designer.InterfaceOperation operationInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.InterfaceHasOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.InterfaceHasOperation>(operationInstance, global::LinqToRdf.Designer.InterfaceHasOperation.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InterfaceHasOperation instance accessors
		
		/// <summary>
		/// Get any InterfaceHasOperation links between a given ModelInterface and a InterfaceOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.InterfaceHasOperation> GetLinks( global::LinqToRdf.Designer.ModelInterface source, global::LinqToRdf.Designer.InterfaceOperation target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.InterfaceHasOperation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.InterfaceHasOperation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.InterfaceHasOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.InterfaceHasOperation>(source, global::LinqToRdf.Designer.InterfaceHasOperation.InterfaceDomainRoleId);
			foreach ( global::LinqToRdf.Designer.InterfaceHasOperation link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InterfaceHasOperation link between a given ModelInterfaceand a InterfaceOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.InterfaceHasOperation GetLink( global::LinqToRdf.Designer.ModelInterface source, global::LinqToRdf.Designer.InterfaceOperation target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.InterfaceHasOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.InterfaceHasOperation>(source, global::LinqToRdf.Designer.InterfaceHasOperation.InterfaceDomainRoleId);
			foreach ( global::LinqToRdf.Designer.InterfaceHasOperation link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship MultipleAssociationRole
	/// Links a MultipleAssociation to one of the classes it associates.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.MultipleAssociationRole.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.MultipleAssociationRole.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0021b96f-1ea1-4771-9508-d5ef3c5afa19")]
	public partial class MultipleAssociationRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MultipleAssociationRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0021b96f, 0x1ea1, 0x4771, 0x95, 0x08, 0xd5, 0xef, 0x3c, 0x5a, 0xfa, 0x19);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MultipleAssociationRole link in the same Partition as the given MultipleAssociation
		/// </summary>
		/// <param name="source">MultipleAssociation to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public MultipleAssociationRole(MultipleAssociation source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MultipleAssociationRole.MultipleAssociationDomainRoleId, source), new DslModeling::RoleAssignment(MultipleAssociationRole.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MultipleAssociationRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MultipleAssociationRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MultipleAssociationRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MultipleAssociationRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MultipleAssociation domain role code
		
		/// <summary>
		/// MultipleAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid MultipleAssociationDomainRoleId = new global::System.Guid(0xe17cf3de, 0xfbbb, 0x47a7, 0xa0, 0x46, 0xc9, 0xfa, 0x52, 0xbe, 0x0a, 0x96);
		
		/// <summary>
		/// DomainRole MultipleAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.MultipleAssociationRole/MultipleAssociation.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.MultipleAssociationRole/MultipleAssociation.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="LinqToRdf.Designer.MultipleAssociationRole/MultipleAssociation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e17cf3de-fbbb-47a7-a046-c9fa52be0a96")]
		public virtual MultipleAssociation MultipleAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MultipleAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, MultipleAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MultipleAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MultipleAssociations of a ModelClass
		/// <summary>
		/// Gets a list of MultipleAssociations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MultipleAssociation> GetMultipleAssociations(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<MultipleAssociation>(element, TypeDomainRoleId);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0x6b4b9b3c, 0xb8e7, 0x4021, 0xb1, 0x1f, 0xd8, 0x58, 0x99, 0x68, 0x81, 0x7d);
		
		/// <summary>
		/// DomainRole Type
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.MultipleAssociationRole/Type.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.MultipleAssociationRole/Type.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MultipleAssociations", PropertyDisplayNameKey="LinqToRdf.Designer.MultipleAssociationRole/Type.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6b4b9b3c-b8e7-4021-b11f-d8589968817d")]
		public virtual ModelClass Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a MultipleAssociation
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetTypes(MultipleAssociation element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, MultipleAssociationDomainRoleId);
		}
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0x17a0c5aa, 0xd814, 0x4ac3, 0xbe, 0x73, 0xc6, 0x7f, 0xd9, 0x47, 0xef, 0x10);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private Multiplicity multiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.MultipleAssociationRole/Multiplicity.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.MultipleAssociationRole/Multiplicity.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("17a0c5aa-d814-4ac3-be73-c67fd947ef10")]
		public Multiplicity Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MultipleAssociationRole.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<MultipleAssociationRole, Multiplicity>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MultipleAssociationRole.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MultipleAssociationRole.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(MultipleAssociationRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.multiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MultipleAssociationRole element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RoleName domain property code
		
		/// <summary>
		/// RoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RoleNameDomainPropertyId = new global::System.Guid(0x876d206e, 0x8c0a, 0x4378, 0x8d, 0xac, 0xef, 0xbb, 0x2c, 0x55, 0x27, 0xe8);
		
		/// <summary>
		/// Storage for RoleName
		/// </summary>
		private global::System.String roleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.MultipleAssociationRole/RoleName.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.MultipleAssociationRole/RoleName.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("876d206e-8c0a-4378-8dac-efbb2c5527e8")]
		public global::System.String RoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return roleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MultipleAssociationRole.RoleName domain property.
		/// </summary>
		internal sealed partial class RoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<MultipleAssociationRole, global::System.String>
		{
			private RoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MultipleAssociationRole.RoleName domain property value handler.
			/// </summary>
			public static readonly RoleNamePropertyHandler Instance = new RoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MultipleAssociationRole.RoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MultipleAssociationRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.roleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MultipleAssociationRole element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.roleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MultipleAssociation link accessor
		/// <summary>
		/// Get the list of MultipleAssociationRole links to a MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.MultipleAssociationRole> GetLinksToTypes ( global::LinqToRdf.Designer.MultipleAssociation multipleAssociationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.MultipleAssociationRole>(multipleAssociationInstance, global::LinqToRdf.Designer.MultipleAssociationRole.MultipleAssociationDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the list of MultipleAssociationRole links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.MultipleAssociationRole> GetLinksToMultipleAssociations ( global::LinqToRdf.Designer.ModelClass typeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.MultipleAssociationRole>(typeInstance, global::LinqToRdf.Designer.MultipleAssociationRole.TypeDomainRoleId);
		}
		#endregion
		#region MultipleAssociationRole instance accessors
		
		/// <summary>
		/// Get any MultipleAssociationRole links between a given MultipleAssociation and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.MultipleAssociationRole> GetLinks( global::LinqToRdf.Designer.MultipleAssociation source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.MultipleAssociationRole> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.MultipleAssociationRole>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.MultipleAssociationRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.MultipleAssociationRole>(source, global::LinqToRdf.Designer.MultipleAssociationRole.MultipleAssociationDomainRoleId);
			foreach ( global::LinqToRdf.Designer.MultipleAssociationRole link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MultipleAssociationRole link between a given MultipleAssociationand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.MultipleAssociationRole GetLink( global::LinqToRdf.Designer.MultipleAssociation source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.MultipleAssociationRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.MultipleAssociationRole>(source, global::LinqToRdf.Designer.MultipleAssociationRole.MultipleAssociationDomainRoleId);
			foreach ( global::LinqToRdf.Designer.MultipleAssociationRole link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship AssociationClassRelationship
	/// Identifies a MultipleAssociation with a Class, so that it can have attributes.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.AssociationClassRelationship.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.AssociationClassRelationship.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("92220dc1-94de-4b22-975e-0f978d2def66")]
	public partial class AssociationClassRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssociationClassRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x92220dc1, 0x94de, 0x4b22, 0x97, 0x5e, 0x0f, 0x97, 0x8d, 0x2d, 0xef, 0x66);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssociationClassRelationship link in the same Partition as the given MultipleAssociation
		/// </summary>
		/// <param name="source">MultipleAssociation to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public AssociationClassRelationship(MultipleAssociation source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssociationClassRelationship.MultipleAssociationDomainRoleId, source), new DslModeling::RoleAssignment(AssociationClassRelationship.AssociationClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationClassRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationClassRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationClassRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationClassRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MultipleAssociation domain role code
		
		/// <summary>
		/// MultipleAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid MultipleAssociationDomainRoleId = new global::System.Guid(0xb696284b, 0x9a12, 0x4737, 0xac, 0x84, 0xa7, 0xbc, 0xb4, 0x4a, 0xdc, 0xdc);
		
		/// <summary>
		/// DomainRole MultipleAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.AssociationClassRelationship/MultipleAssociation.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.AssociationClassRelationship/MultipleAssociation.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AssociationClass", PropertyDisplayNameKey="LinqToRdf.Designer.AssociationClassRelationship/MultipleAssociation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b696284b-9a12-4737-ac84-a7bcb44adcdc")]
		public virtual MultipleAssociation MultipleAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MultipleAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, MultipleAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MultipleAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MultipleAssociation of a ModelClass
		/// <summary>
		/// Gets MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MultipleAssociation GetMultipleAssociation(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationClassDomainRoleId) as MultipleAssociation;
		}
		
		/// <summary>
		/// Sets MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMultipleAssociation(ModelClass element, MultipleAssociation newMultipleAssociation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationClassDomainRoleId, newMultipleAssociation);
		}
		#endregion
		#region AssociationClass domain role code
		
		/// <summary>
		/// AssociationClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationClassDomainRoleId = new global::System.Guid(0xa6942d01, 0xc83d, 0x4620, 0x99, 0xee, 0x94, 0x8a, 0x78, 0xb5, 0x20, 0x15);
		
		/// <summary>
		/// DomainRole AssociationClass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.AssociationClassRelationship/AssociationClass.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.AssociationClassRelationship/AssociationClass.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MultipleAssociation", PropertyDisplayNameKey="LinqToRdf.Designer.AssociationClassRelationship/AssociationClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a6942d01-c83d-4620-99ee-948a78b52015")]
		public virtual ModelClass AssociationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssociationClass of a MultipleAssociation
		/// <summary>
		/// Gets AssociationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetAssociationClass(MultipleAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MultipleAssociationDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets AssociationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAssociationClass(MultipleAssociation element, ModelClass newAssociationClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MultipleAssociationDomainRoleId, newAssociationClass);
		}
		#endregion
		#region MultipleAssociation link accessor
		/// <summary>
		/// Get the AssociationClassRelationship link to a MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.AssociationClassRelationship GetLinkToAssociationClass (global::LinqToRdf.Designer.MultipleAssociation multipleAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.AssociationClassRelationship>(multipleAssociationInstance, global::LinqToRdf.Designer.AssociationClassRelationship.MultipleAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MultipleAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssociationClass link accessor
		/// <summary>
		/// Get the AssociationClassRelationship link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.AssociationClassRelationship GetLinkToMultipleAssociation (global::LinqToRdf.Designer.ModelClass associationClassInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.AssociationClassRelationship>(associationClassInstance, global::LinqToRdf.Designer.AssociationClassRelationship.AssociationClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AssociationClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssociationClassRelationship instance accessors
		
		/// <summary>
		/// Get any AssociationClassRelationship links between a given MultipleAssociation and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.AssociationClassRelationship> GetLinks( global::LinqToRdf.Designer.MultipleAssociation source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.AssociationClassRelationship> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.AssociationClassRelationship>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.AssociationClassRelationship>(source, global::LinqToRdf.Designer.AssociationClassRelationship.MultipleAssociationDomainRoleId);
			foreach ( global::LinqToRdf.Designer.AssociationClassRelationship link in links )
			{
				if ( target.Equals(link.AssociationClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssociationClassRelationship link between a given MultipleAssociationand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.AssociationClassRelationship GetLink( global::LinqToRdf.Designer.MultipleAssociation source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.AssociationClassRelationship>(source, global::LinqToRdf.Designer.AssociationClassRelationship.MultipleAssociationDomainRoleId);
			foreach ( global::LinqToRdf.Designer.AssociationClassRelationship link in links )
			{
				if ( target.Equals(link.AssociationClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship Aggregation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.Aggregation.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.Aggregation.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("9851a5d2-d257-421e-bc4d-97a03ed76e3d")]
	public partial class Aggregation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Aggregation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9851a5d2, 0xd257, 0x421e, 0xbc, 0x4d, 0x97, 0xa0, 0x3e, 0xd7, 0x6e, 0x3d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Aggregation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Aggregation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Aggregation.AggregationSourceDomainRoleId, source), new DslModeling::RoleAssignment(Aggregation.AggregationTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Aggregation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Aggregation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Aggregation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Aggregation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregationSource domain role code
		
		/// <summary>
		/// AggregationSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregationSourceDomainRoleId = new global::System.Guid(0x9c047af7, 0x8d07, 0x4b1a, 0x84, 0xbd, 0x3c, 0xa7, 0xfd, 0x84, 0xfe, 0x06);
		
		/// <summary>
		/// DomainRole AggregationSource
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Aggregation/AggregationSource.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Aggregation/AggregationSource.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregationTargets", PropertyDisplayNameKey="LinqToRdf.Designer.Aggregation/AggregationSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9c047af7-8d07-4b1a-84bd-3ca7fd84fe06")]
		public virtual ModelClass AggregationSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregationSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregationSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationSources of a ModelClass
		/// <summary>
		/// Gets a list of AggregationSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetAggregationSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, AggregationTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing AggregationSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AggregationSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AggregationSource = value;
			}
		}
		
		#endregion
		#region AggregationTarget domain role code
		
		/// <summary>
		/// AggregationTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregationTargetDomainRoleId = new global::System.Guid(0xbf7d6e84, 0x73a8, 0x41ca, 0xb2, 0xba, 0xa5, 0x4d, 0xab, 0x63, 0x5c, 0xf5);
		
		/// <summary>
		/// DomainRole AggregationTarget
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Aggregation/AggregationTarget.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Aggregation/AggregationTarget.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregationSources", PropertyDisplayNameKey="LinqToRdf.Designer.Aggregation/AggregationTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bf7d6e84-73a8-41ca-b2ba-a54dab635cf5")]
		public virtual ModelClass AggregationTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregationTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregationTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationTargets of a ModelClass
		/// <summary>
		/// Gets a list of AggregationTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetAggregationTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, AggregationSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing AggregationTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AggregationTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AggregationTarget = value;
			}
		}
		
		#endregion
		#region AggregationSource link accessor
		/// <summary>
		/// Get the list of Aggregation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Aggregation> GetLinksToAggregationTargets ( global::LinqToRdf.Designer.ModelClass aggregationSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Aggregation>(aggregationSourceInstance, global::LinqToRdf.Designer.Aggregation.AggregationSourceDomainRoleId);
		}
		#endregion
		#region AggregationTarget link accessor
		/// <summary>
		/// Get the list of Aggregation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Aggregation> GetLinksToAggregationSources ( global::LinqToRdf.Designer.ModelClass aggregationTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Aggregation>(aggregationTargetInstance, global::LinqToRdf.Designer.Aggregation.AggregationTargetDomainRoleId);
		}
		#endregion
		#region Aggregation instance accessors
		
		/// <summary>
		/// Get any Aggregation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Aggregation> GetLinks( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.Aggregation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.Aggregation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.Aggregation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Aggregation>(source, global::LinqToRdf.Designer.Aggregation.AggregationSourceDomainRoleId);
			foreach ( global::LinqToRdf.Designer.Aggregation link in links )
			{
				if ( target.Equals(link.AggregationTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship Composition
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.Composition.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.Composition.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("827479a9-1092-4d48-a598-1944842293f6")]
	public partial class Composition : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Composition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x827479a9, 0x1092, 0x4d48, 0xa5, 0x98, 0x19, 0x44, 0x84, 0x22, 0x93, 0xf6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Composition link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Composition(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Composition.CompositionSourceDomainRoleId, source), new DslModeling::RoleAssignment(Composition.CompositionTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Composition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Composition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Composition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Composition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CompositionSource domain role code
		
		/// <summary>
		/// CompositionSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositionSourceDomainRoleId = new global::System.Guid(0xdd6d156d, 0x0ac5, 0x4d39, 0x80, 0x0d, 0xa4, 0x8a, 0x89, 0xcf, 0xb8, 0x16);
		
		/// <summary>
		/// DomainRole CompositionSource
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Composition/CompositionSource.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Composition/CompositionSource.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompositionTargets", PropertyDisplayNameKey="LinqToRdf.Designer.Composition/CompositionSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd6d156d-0ac5-4d39-800d-a48a89cfb816")]
		public virtual ModelClass CompositionSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositionSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositionSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompositionSources of a ModelClass
		/// <summary>
		/// Gets a list of CompositionSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetCompositionSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, CompositionTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing CompositionSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompositionSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompositionSource = value;
			}
		}
		
		#endregion
		#region CompositionTarget domain role code
		
		/// <summary>
		/// CompositionTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositionTargetDomainRoleId = new global::System.Guid(0x4625af30, 0x1ecb, 0x4e9f, 0xb8, 0xbb, 0x5c, 0xc1, 0xf2, 0xb9, 0x17, 0x77);
		
		/// <summary>
		/// DomainRole CompositionTarget
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Composition/CompositionTarget.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Composition/CompositionTarget.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CompositionSources", PropertyDisplayNameKey="LinqToRdf.Designer.Composition/CompositionTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4625af30-1ecb-4e9f-b8bb-5cc1f2b91777")]
		public virtual ModelClass CompositionTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositionTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositionTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompositionTargets of a ModelClass
		/// <summary>
		/// Gets a list of CompositionTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetCompositionTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, CompositionSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing CompositionTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompositionTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompositionTarget = value;
			}
		}
		
		#endregion
		#region CompositionSource link accessor
		/// <summary>
		/// Get the list of Composition links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Composition> GetLinksToCompositionTargets ( global::LinqToRdf.Designer.ModelClass compositionSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Composition>(compositionSourceInstance, global::LinqToRdf.Designer.Composition.CompositionSourceDomainRoleId);
		}
		#endregion
		#region CompositionTarget link accessor
		/// <summary>
		/// Get the list of Composition links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Composition> GetLinksToCompositionSources ( global::LinqToRdf.Designer.ModelClass compositionTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Composition>(compositionTargetInstance, global::LinqToRdf.Designer.Composition.CompositionTargetDomainRoleId);
		}
		#endregion
		#region Composition instance accessors
		
		/// <summary>
		/// Get any Composition links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Composition> GetLinks( global::LinqToRdf.Designer.ModelClass source, global::LinqToRdf.Designer.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.Composition> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.Composition>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.Composition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Composition>(source, global::LinqToRdf.Designer.Composition.CompositionSourceDomainRoleId);
			foreach ( global::LinqToRdf.Designer.Composition link in links )
			{
				if ( target.Equals(link.CompositionTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship ModelRootHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.ModelRootHasTypes.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.ModelRootHasTypes.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("523f7467-e3ca-4aea-87d3-b2d93830e054")]
	public partial class ModelRootHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x523f7467, 0xe3ca, 0x4aea, 0x87, 0xd3, 0xb2, 0xd9, 0x38, 0x30, 0xe0, 0x54);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasTypes link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelRootHasTypes(ModelRoot source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasTypes.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasTypes.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x41b59785, 0x3cb5, 0x4a8a, 0x92, 0x1a, 0x3a, 0x3c, 0x2f, 0x86, 0x5d, 0x47);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.ModelRootHasTypes/ModelRoot.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.ModelRootHasTypes/ModelRoot.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="LinqToRdf.Designer.ModelRootHasTypes/ModelRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("41b59785-3cb5-4a8a-921a-3a3c2f865d47")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelType
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypeDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelType element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypeDomainRoleId, newModelRoot);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0x2f574301, 0x6f91, 0x4b17, 0x8a, 0xef, 0xb8, 0x7e, 0xbc, 0x65, 0x2d, 0x10);
		
		/// <summary>
		/// DomainRole Type
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.ModelRootHasTypes/Type.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.ModelRootHasTypes/Type.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2f574301-6f91-4b17-8aef-b87ebc652d10")]
		public virtual ModelType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ModelRoot
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ModelRoot element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasTypes links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.ModelRootHasTypes> GetLinksToTypes ( global::LinqToRdf.Designer.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ModelRootHasTypes>(modelRootInstance, global::LinqToRdf.Designer.ModelRootHasTypes.ModelRootDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the ModelRootHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.ModelRootHasTypes GetLinkToModelRoot (global::LinqToRdf.Designer.ModelType typeInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ModelRootHasTypes>(typeInstance, global::LinqToRdf.Designer.ModelRootHasTypes.TypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Type not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasTypes instance accessors
		
		/// <summary>
		/// Get any ModelRootHasTypes links between a given ModelRoot and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.ModelRootHasTypes> GetLinks( global::LinqToRdf.Designer.ModelRoot source, global::LinqToRdf.Designer.ModelType target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.ModelRootHasTypes> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.ModelRootHasTypes>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ModelRootHasTypes>(source, global::LinqToRdf.Designer.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::LinqToRdf.Designer.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasTypes link between a given ModelRootand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.ModelRootHasTypes GetLink( global::LinqToRdf.Designer.ModelRoot source, global::LinqToRdf.Designer.ModelType target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.ModelRootHasTypes>(source, global::LinqToRdf.Designer.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::LinqToRdf.Designer.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.CommentReferencesSubjects.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.CommentReferencesSubjects.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f1966581-441b-443a-a62c-fade171b640b")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf1966581, 0x441b, 0x443a, 0xa6, 0x2c, 0xfa, 0xde, 0x17, 0x1b, 0x64, 0x0b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x11565226, 0xbb1d, 0x403d, 0x9c, 0x85, 0x08, 0xf4, 0x82, 0x5f, 0x73, 0xbc);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.CommentReferencesSubjects/Comment.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.CommentReferencesSubjects/Comment.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="LinqToRdf.Designer.CommentReferencesSubjects/Comment.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("11565226-bb1d-403d-9c85-08f4825f73bc")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelType
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelType element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x1921de61, 0x2e3a, 0x4e12, 0x82, 0xb9, 0xb3, 0xfa, 0xa0, 0x62, 0x17, 0xd1);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.CommentReferencesSubjects/Subject.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.CommentReferencesSubjects/Subject.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="LinqToRdf.Designer.CommentReferencesSubjects/Subject.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1921de61-2e3a-4e12-82b9-b3faa06217d1")]
		public virtual ModelType Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetSubjects(Comment element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.CommentReferencesSubjects> GetLinksToSubjects ( global::LinqToRdf.Designer.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.CommentReferencesSubjects>(commentInstance, global::LinqToRdf.Designer.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.CommentReferencesSubjects> GetLinksToComments ( global::LinqToRdf.Designer.ModelType subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.CommentReferencesSubjects>(subjectInstance, global::LinqToRdf.Designer.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.CommentReferencesSubjects> GetLinks( global::LinqToRdf.Designer.Comment source, global::LinqToRdf.Designer.ModelType target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.CommentReferencesSubjects>(source, global::LinqToRdf.Designer.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::LinqToRdf.Designer.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.CommentReferencesSubjects GetLink( global::LinqToRdf.Designer.Comment source, global::LinqToRdf.Designer.ModelType target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.CommentReferencesSubjects>(source, global::LinqToRdf.Designer.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::LinqToRdf.Designer.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Designer
{
	/// <summary>
	/// DomainRelationship Implementation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Designer.Implementation.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Designer.Implementation.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f2ba0cf7-a0c8-4290-a02f-be5e4f9fc282")]
	public partial class Implementation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Implementation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf2ba0cf7, 0xa0c8, 0x4290, 0xa0, 0x2f, 0xbe, 0x5e, 0x4f, 0x9f, 0xc2, 0x82);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Implementation link in the same Partition as the given ModelInterface
		/// </summary>
		/// <param name="source">ModelInterface to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public Implementation(ModelInterface source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Implementation.ImplementDomainRoleId, source), new DslModeling::RoleAssignment(Implementation.ImplementorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Implementation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Implementation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Implementation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Implementation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Implement domain role code
		
		/// <summary>
		/// Implement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplementDomainRoleId = new global::System.Guid(0xa2c35c2c, 0xd9f5, 0x41fa, 0x82, 0x56, 0x23, 0x77, 0x64, 0x0e, 0x87, 0xa6);
		
		/// <summary>
		/// DomainRole Implement
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Implementation/Implement.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Implementation/Implement.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Implementors", PropertyDisplayNameKey="LinqToRdf.Designer.Implementation/Implement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a2c35c2c-d9f5-41fa-8256-2377640e87a6")]
		public virtual ModelInterface Implement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelInterface)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Implements of a ModelType
		/// <summary>
		/// Gets a list of Implements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelInterface> GetImplements(ModelType element)
		{
			return new DslModeling::LinkedElementCollection<ModelInterface>(element, ImplementorDomainRoleId);
		}
		#endregion
		#region Implementor domain role code
		
		/// <summary>
		/// Implementor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplementorDomainRoleId = new global::System.Guid(0x21d7b487, 0x29b6, 0x4871, 0xb2, 0x62, 0xeb, 0xf5, 0x28, 0x13, 0x42, 0x50);
		
		/// <summary>
		/// DomainRole Implementor
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Designer.Implementation/Implementor.DisplayName", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Designer.Implementation/Implementor.Description", typeof(global::LinqToRdf.Designer.LinqToRdfDesignerDomainModel), "LinqToRdf.Designer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Implements", PropertyDisplayNameKey="LinqToRdf.Designer.Implementation/Implementor.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("21d7b487-29b6-4871-b262-ebf528134250")]
		public virtual ModelType Implementor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplementorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplementorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Implementors of a ModelInterface
		/// <summary>
		/// Gets a list of Implementors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetImplementors(ModelInterface element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, ImplementDomainRoleId);
		}
		#endregion
		#region Implement link accessor
		/// <summary>
		/// Get the list of Implementation links to a ModelInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Implementation> GetLinksToImplementors ( global::LinqToRdf.Designer.ModelInterface implementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Implementation>(implementInstance, global::LinqToRdf.Designer.Implementation.ImplementDomainRoleId);
		}
		#endregion
		#region Implementor link accessor
		/// <summary>
		/// Get the list of Implementation links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Implementation> GetLinksToImplements ( global::LinqToRdf.Designer.ModelType implementorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Implementation>(implementorInstance, global::LinqToRdf.Designer.Implementation.ImplementorDomainRoleId);
		}
		#endregion
		#region Implementation instance accessors
		
		/// <summary>
		/// Get any Implementation links between a given ModelInterface and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Designer.Implementation> GetLinks( global::LinqToRdf.Designer.ModelInterface source, global::LinqToRdf.Designer.ModelType target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Designer.Implementation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Designer.Implementation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.Implementation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Implementation>(source, global::LinqToRdf.Designer.Implementation.ImplementDomainRoleId);
			foreach ( global::LinqToRdf.Designer.Implementation link in links )
			{
				if ( target.Equals(link.Implementor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Implementation link between a given ModelInterfaceand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Designer.Implementation GetLink( global::LinqToRdf.Designer.ModelInterface source, global::LinqToRdf.Designer.ModelType target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Designer.Implementation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Designer.Implementation>(source, global::LinqToRdf.Designer.Implementation.ImplementDomainRoleId);
			foreach ( global::LinqToRdf.Designer.Implementation link in links )
			{
				if ( target.Equals(link.Implementor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
