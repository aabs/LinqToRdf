//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass ClassDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassDiagram.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDesignerDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ClassDiagram.Description", typeof(global::LinqToRdf.Design.LinqToRdfDesignerDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cc391b9b-0d7d-406c-a2fa-5730cf3f53b5")]
	public partial class ClassDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::LinqToRdf.Design.LinqToRdfDesignerToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Compartment support
		/// <summary>
		/// Whether compartment items change events are subscribed to.
		/// </summary>
		private bool subscribedCompartmentItemsEvents;
		
		/// <summary>
		/// Subscribe to events fired when compartment items changes.
		/// </summary>
		public void SubscribeCompartmentItemsEvents()
		{
			if (!subscribedCompartmentItemsEvents && this.Store != null)
			{
				subscribedCompartmentItemsEvents = true;
				this.Store.EventManagerDirectory.ElementAdded.Add(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Add(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Add(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
			}
		}
		
		/// <summary>
		/// Unsubscribe to events fired when compartment items changes.
		/// </summary>
		public void UnsubscribeCompartmentItemsEvents()
		{
			if (subscribedCompartmentItemsEvents)
			{
				this.Store.EventManagerDirectory.ElementAdded.Remove(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Remove(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Remove(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
				subscribedCompartmentItemsEvents = false;
			}
		}
		
		#region Event handlers
		/// <summary>
		/// Event for element added.
		/// </summary>
		private void CompartmentItemAdded(object sender, DslModeling::ElementAddedEventArgs e)
		{
			CompartmentItemAddRule.ElementAdded(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element deleted.
		/// </summary>
		private void CompartmentItemDeleted(object sender, DslModeling::ElementDeletedEventArgs e)
		{
			CompartmentItemDeleteRule.ElementDeleted(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element property changed.
		/// </summary>
		private void CompartmentItemPropertyChanged(object sender, DslModeling::ElementPropertyChangedEventArgs e)
		{
			CompartmentItemChangeRule.ElementPropertyChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player changed.
		/// </summary>
		private void CompartmentItemRolePlayerChanged(object sender, DslModeling::RolePlayerChangedEventArgs e)
		{
			CompartmentItemRolePlayerChangeRule.RolePlayerChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player order changed.
		/// </summary>
		private void CompartmentItemRolePlayerOrderChanged(object sender, DslModeling::RolePlayerOrderChangedEventArgs e)
		{
			CompartmentItemRolePlayerPositionChangeRule.RolePlayerPositionChanged(e, true /* repaint only */);
		}
		#endregion
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Most connectors are mapped to element links, but there can be exceptions. This method tell if a connector should be
		/// mapped to an element link.
		/// </summary>
		public override bool IsConnectorMappedToLink(DslDiagrams::BinaryLinkShape connector)
		{
			#region Check Parameters
			global::System.Diagnostics.Debug.Assert(connector != null);
			if (connector == null)
				throw new global::System.ArgumentNullException("connector");
			#endregion
			if (connector.GetType() == typeof(global::LinqToRdf.Design.AssociationConnector))
				return false;
			return base.IsConnectorMappedToLink(connector);
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::LinqToRdf.Design.ModelClass)
			{
				global::LinqToRdf.Design.ClassShape newShape = new global::LinqToRdf.Design.ClassShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::LinqToRdf.Design.ModelInterface)
			{
				global::LinqToRdf.Design.InterfaceShape newShape = new global::LinqToRdf.Design.InterfaceShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::LinqToRdf.Design.MultipleAssociation)
			{
				global::LinqToRdf.Design.MultipleAssociationShape newShape = new global::LinqToRdf.Design.MultipleAssociationShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::LinqToRdf.Design.UnidirectionalAssociation)
			{
				global::LinqToRdf.Design.UnidirectionalConnector newShape = new global::LinqToRdf.Design.UnidirectionalConnector(this.Partition);
				return newShape;
			}
			if(element is global::LinqToRdf.Design.BidirectionalAssociation)
			{
				global::LinqToRdf.Design.BidirectionalConnector newShape = new global::LinqToRdf.Design.BidirectionalConnector(this.Partition);
				return newShape;
			}
			if(element is global::LinqToRdf.Design.Aggregation)
			{
				global::LinqToRdf.Design.AggregationConnector newShape = new global::LinqToRdf.Design.AggregationConnector(this.Partition);
				return newShape;
			}
			if(element is global::LinqToRdf.Design.Composition)
			{
				global::LinqToRdf.Design.CompositionConnector newShape = new global::LinqToRdf.Design.CompositionConnector(this.Partition);
				return newShape;
			}
			if(element is global::LinqToRdf.Design.Comment)
			{
				global::LinqToRdf.Design.CommentBoxShape newShape = new global::LinqToRdf.Design.CommentBoxShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::LinqToRdf.Design.MultipleAssociationRole)
			{
				global::LinqToRdf.Design.MultipleAssociationRoleConnector newShape = new global::LinqToRdf.Design.MultipleAssociationRoleConnector(this.Partition);
				return newShape;
			}
			if(element is global::LinqToRdf.Design.AssociationClassRelationship)
			{
				global::LinqToRdf.Design.AssociationClassConnector newShape = new global::LinqToRdf.Design.AssociationClassConnector(this.Partition);
				return newShape;
			}
			if(element is global::LinqToRdf.Design.CommentReferencesSubjects)
			{
				global::LinqToRdf.Design.CommentConnector newShape = new global::LinqToRdf.Design.CommentConnector(this.Partition);
				return newShape;
			}
			if(element is global::LinqToRdf.Design.Generalization)
			{
				global::LinqToRdf.Design.GeneralizationConnector newShape = new global::LinqToRdf.Design.GeneralizationConnector(this.Partition);
				return newShape;
			}
			if(element is global::LinqToRdf.Design.Implementation)
			{
				global::LinqToRdf.Design.ImplementationConnector newShape = new global::LinqToRdf.Design.ImplementationConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::LinqToRdf.Design.ClassShape.DecoratorsInitialized += ClassShapeDecoratorMap.OnDecoratorsInitialized;
			global::LinqToRdf.Design.InterfaceShape.DecoratorsInitialized += InterfaceShapeDecoratorMap.OnDecoratorsInitialized;
			global::LinqToRdf.Design.CommentBoxShape.DecoratorsInitialized += CommentBoxShapeDecoratorMap.OnDecoratorsInitialized;
			global::LinqToRdf.Design.UnidirectionalConnector.DecoratorsInitialized += UnidirectionalConnectorDecoratorMap.OnDecoratorsInitialized;
			global::LinqToRdf.Design.BidirectionalConnector.DecoratorsInitialized += BidirectionalConnectorDecoratorMap.OnDecoratorsInitialized;
			global::LinqToRdf.Design.AggregationConnector.DecoratorsInitialized += AggregationConnectorDecoratorMap.OnDecoratorsInitialized;
			global::LinqToRdf.Design.CompositionConnector.DecoratorsInitialized += CompositionConnectorDecoratorMap.OnDecoratorsInitialized;
			global::LinqToRdf.Design.MultipleAssociationRoleConnector.DecoratorsInitialized += MultipleAssociationRoleConnectorDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ClassShape.
		/// </summary>
		internal static partial class ClassShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ClassShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for InterfaceShape.
		/// </summary>
		internal static partial class InterfaceShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for InterfaceShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CommentBoxShape.
		/// </summary>
		internal static partial class CommentBoxShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CommentBoxShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Comment.TextDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Comment").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AssociationConnector.
		/// </summary>
		internal static partial class AssociationConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AssociationConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for UnidirectionalConnector.
		/// </summary>
		internal static partial class UnidirectionalConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for UnidirectionalConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				AssociationConnectorDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.SourceMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.TargetMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.SourceRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceRoleName").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.TargetRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetRoleName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for BidirectionalConnector.
		/// </summary>
		internal static partial class BidirectionalConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for BidirectionalConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				AssociationConnectorDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.SourceMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.TargetMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.SourceRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceRoleName").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.TargetRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetRoleName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AggregationConnector.
		/// </summary>
		internal static partial class AggregationConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AggregationConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				AssociationConnectorDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.SourceMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.TargetMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.SourceRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceRoleName").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.TargetRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetRoleName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CompositionConnector.
		/// </summary>
		internal static partial class CompositionConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CompositionConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				AssociationConnectorDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.SourceMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.TargetMultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.SourceRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceRoleName").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.Association.TargetRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetRoleName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MultipleAssociationRoleConnector.
		/// </summary>
		internal static partial class MultipleAssociationRoleConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MultipleAssociationRoleConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.MultipleAssociationRole.MultiplicityDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::LinqToRdf.Design.MultipleAssociationRole.RoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetRoleName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		#region Connect actions
		private global::LinqToRdf.Design.UnidirectionalAssociationConnectAction unidirectionalAssociationConnectAction;
		private global::LinqToRdf.Design.BidirectionalAssociationConnectAction bidirectionalAssociationConnectAction;
		private global::LinqToRdf.Design.AggregationConnectAction aggregationConnectAction;
		private global::LinqToRdf.Design.CompositionConnectAction compositionConnectAction;
		private global::LinqToRdf.Design.GeneralizationConnectAction generalizationConnectAction;
		private global::LinqToRdf.Design.MultipleAssociationRoleConnectAction multipleAssociationRoleConnectAction;
		private global::LinqToRdf.Design.AssociationClassRelationshipConnectAction associationClassRelationshipConnectAction;
		private global::LinqToRdf.Design.CommentsReferenceTypesConnectAction commentsReferenceTypesConnectAction;
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (activeView.SelectedToolboxItemSupportsFilterString(global::LinqToRdf.Design.LinqToRdfDesignerToolboxHelper.UnidirectionalAssociationFilterString))
				{
					if (this.unidirectionalAssociationConnectAction == null)
					{
						this.unidirectionalAssociationConnectAction = new global::LinqToRdf.Design.UnidirectionalAssociationConnectAction(this);
						this.unidirectionalAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.unidirectionalAssociationConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::LinqToRdf.Design.LinqToRdfDesignerToolboxHelper.BidirectionalAssociationFilterString))
				{
					if (this.bidirectionalAssociationConnectAction == null)
					{
						this.bidirectionalAssociationConnectAction = new global::LinqToRdf.Design.BidirectionalAssociationConnectAction(this);
						this.bidirectionalAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.bidirectionalAssociationConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::LinqToRdf.Design.LinqToRdfDesignerToolboxHelper.AggregationFilterString))
				{
					if (this.aggregationConnectAction == null)
					{
						this.aggregationConnectAction = new global::LinqToRdf.Design.AggregationConnectAction(this);
						this.aggregationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.aggregationConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::LinqToRdf.Design.LinqToRdfDesignerToolboxHelper.CompositionFilterString))
				{
					if (this.compositionConnectAction == null)
					{
						this.compositionConnectAction = new global::LinqToRdf.Design.CompositionConnectAction(this);
						this.compositionConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.compositionConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::LinqToRdf.Design.LinqToRdfDesignerToolboxHelper.GeneralizationFilterString))
				{
					if (this.generalizationConnectAction == null)
					{
						this.generalizationConnectAction = new global::LinqToRdf.Design.GeneralizationConnectAction(this);
						this.generalizationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.generalizationConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::LinqToRdf.Design.LinqToRdfDesignerToolboxHelper.MultipleAssociationRoleFilterString))
				{
					if (this.multipleAssociationRoleConnectAction == null)
					{
						this.multipleAssociationRoleConnectAction = new global::LinqToRdf.Design.MultipleAssociationRoleConnectAction(this);
						this.multipleAssociationRoleConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.multipleAssociationRoleConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::LinqToRdf.Design.LinqToRdfDesignerToolboxHelper.AssociationClassRelationshipFilterString))
				{
					if (this.associationClassRelationshipConnectAction == null)
					{
						this.associationClassRelationshipConnectAction = new global::LinqToRdf.Design.AssociationClassRelationshipConnectAction(this);
						this.associationClassRelationshipConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.associationClassRelationshipConnectAction;
				} 
				else if (activeView.SelectedToolboxItemSupportsFilterString(global::LinqToRdf.Design.LinqToRdfDesignerToolboxHelper.CommentsReferenceTypesFilterString))
				{
					if (this.commentsReferenceTypesConnectAction == null)
					{
						this.commentsReferenceTypesConnectAction = new global::LinqToRdf.Design.CommentsReferenceTypesConnectAction(this);
						this.commentsReferenceTypesConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commentsReferenceTypesConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					pointArgs.DiagramClientView.ActiveMouseAction = action;
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				activeView.Toolbox.SelectedToolboxItemUsed();
			}
		}
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.unidirectionalAssociationConnectAction != null)
					{
						this.unidirectionalAssociationConnectAction.Dispose();
						this.unidirectionalAssociationConnectAction = null;
					}
					if(this.bidirectionalAssociationConnectAction != null)
					{
						this.bidirectionalAssociationConnectAction.Dispose();
						this.bidirectionalAssociationConnectAction = null;
					}
					if(this.aggregationConnectAction != null)
					{
						this.aggregationConnectAction.Dispose();
						this.aggregationConnectAction = null;
					}
					if(this.compositionConnectAction != null)
					{
						this.compositionConnectAction.Dispose();
						this.compositionConnectAction = null;
					}
					if(this.generalizationConnectAction != null)
					{
						this.generalizationConnectAction.Dispose();
						this.generalizationConnectAction = null;
					}
					if(this.multipleAssociationRoleConnectAction != null)
					{
						this.multipleAssociationRoleConnectAction.Dispose();
						this.multipleAssociationRoleConnectAction = null;
					}
					if(this.associationClassRelationshipConnectAction != null)
					{
						this.associationClassRelationshipConnectAction.Dispose();
						this.associationClassRelationshipConnectAction = null;
					}
					if(this.commentsReferenceTypesConnectAction != null)
					{
						this.commentsReferenceTypesConnectAction.Dispose();
						this.commentsReferenceTypesConnectAction = null;
					}
					this.UnsubscribeCompartmentItemsEvents();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcc391b9b, 0x0d7d, 0x406c, 0xa2, 0xfa, 0x57, 0x30, 0xcf, 0x3f, 0x53, 0xb5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.MultipleAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ModelInterface), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ModelClass), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Aggregation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Composition), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.UnidirectionalAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.BidirectionalAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.CommentReferencesSubjects), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Generalization), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Implementation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Comment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.MultipleAssociationRole), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.AssociationClassRelationship), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : DslModeling::AddRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (childElement.IsDeleted)
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::LinqToRdf.Design.MultipleAssociation)
				{
					parentElement = GetParentForMultipleAssociation((global::LinqToRdf.Design.MultipleAssociation)childElement);
				} else
				if(childElement is global::LinqToRdf.Design.ModelInterface)
				{
					parentElement = GetParentForModelInterface((global::LinqToRdf.Design.ModelInterface)childElement);
				} else
				if(childElement is global::LinqToRdf.Design.ModelClass)
				{
					parentElement = GetParentForModelClass((global::LinqToRdf.Design.ModelClass)childElement);
				} else
				if(childElement is global::LinqToRdf.Design.Comment)
				{
					parentElement = GetParentForComment((global::LinqToRdf.Design.Comment)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::LinqToRdf.Design.ModelRoot GetParentForModelClass( global::LinqToRdf.Design.ModelType root )
			{
				// Segments 0 and 1
				global::LinqToRdf.Design.ModelRoot result = root.ModelRoot;
				if ( result == null ) return null;
				return result;
			}
			public static global::LinqToRdf.Design.ModelRoot GetParentForModelInterface( global::LinqToRdf.Design.ModelType root )
			{
				// Segments 0 and 1
				global::LinqToRdf.Design.ModelRoot result = root.ModelRoot;
				if ( result == null ) return null;
				return result;
			}
			public static global::LinqToRdf.Design.ModelRoot GetParentForComment( global::LinqToRdf.Design.Comment root )
			{
				// Segments 0 and 1
				global::LinqToRdf.Design.ModelRoot result = root.ModelRoot;
				if ( result == null ) return null;
				return result;
			}
			public static global::LinqToRdf.Design.ModelRoot GetParentForMultipleAssociation( global::LinqToRdf.Design.ModelType root )
			{
				// Segments 0 and 1
				global::LinqToRdf.Design.ModelRoot result = root.ModelRoot;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
		/// <summary>
		/// Rule to update compartments when an item is added to the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ClassHasAttributes), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ClassHasOperations), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.InterfaceHasOperation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemAddRule : DslModeling::AddRule
		{
			/// <summary>
			/// Called when an element is added. 
			/// </summary>
			/// <param name="e"></param>
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				ElementAdded(e, false);
			}
	
			internal static void ElementAdded(DslModeling::ElementAddedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if (e.ModelElement.IsDeleted)
					return;
				if(e.ModelElement is global::LinqToRdf.Design.ClassHasAttributes)
				{
					global::System.Collections.IEnumerable elements = GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::LinqToRdf.Design.ClassHasAttributes)e.ModelElement);
					UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "AttributesCompartment", repaintOnly);
				}
				if(e.ModelElement is global::LinqToRdf.Design.ClassHasOperations)
				{
					global::System.Collections.IEnumerable elements = GetModelClassForClassShapeOperationsCompartmentFromLastLink((global::LinqToRdf.Design.ClassHasOperations)e.ModelElement);
					UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "OperationsCompartment", repaintOnly);
				}
				if(e.ModelElement is global::LinqToRdf.Design.InterfaceHasOperation)
				{
					global::System.Collections.IEnumerable elements = GetModelInterfaceForInterfaceShapeOperationsCompartmentFromLastLink((global::LinqToRdf.Design.InterfaceHasOperation)e.ModelElement);
					UpdateCompartments(elements, typeof(global::LinqToRdf.Design.InterfaceShape), "OperationsCompartment", repaintOnly);
				}
			}
			
			#region static DomainPath traversal methods to get the list of compartments to update
			internal static global::System.Collections.ICollection GetModelClassForClassShapeAttributesCompartmentFromLastLink(global::LinqToRdf.Design.ClassHasAttributes root)
			{
				// Segment 0
				global::LinqToRdf.Design.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetModelClassForClassShapeAttributesCompartment(global::LinqToRdf.Design.ModelAttribute root)
			{
				// Segments 1 and 0
				global::LinqToRdf.Design.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetModelClassForClassShapeOperationsCompartmentFromLastLink(global::LinqToRdf.Design.ClassHasOperations root)
			{
				// Segment 0
				global::LinqToRdf.Design.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetModelClassForClassShapeOperationsCompartment(global::LinqToRdf.Design.ClassOperation root)
			{
				// Segments 1 and 0
				global::LinqToRdf.Design.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetModelInterfaceForInterfaceShapeOperationsCompartmentFromLastLink(global::LinqToRdf.Design.InterfaceHasOperation root)
			{
				// Segment 0
				global::LinqToRdf.Design.ModelInterface result = root.Interface;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetModelInterfaceForInterfaceShapeOperationsCompartment(global::LinqToRdf.Design.InterfaceOperation root)
			{
				// Segments 1 and 0
				global::LinqToRdf.Design.ModelInterface result = root.Interface;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			#endregion
	
			#region helper method to update compartments 
			/// <summary>
			/// Updates the compartments for the shapes associated to the given list of model elements
			/// </summary>
			/// <param name="elements">List of model elements</param>
			/// <param name="shapeType">The type of shape that needs updating</param>
			/// <param name="compartmentName">The name of the compartment to update</param>
			/// <param name="repaintOnly">If true, the method will only invalidate the shape for a repaint, without re-initializing the shape.</param>
			internal static void UpdateCompartments(global::System.Collections.IEnumerable elements, global::System.Type shapeType, string compartmentName, bool repaintOnly)
			{
				foreach (DslModeling::ModelElement element in elements)
				{
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
					foreach (DslDiagrams::PresentationElement pel in pels)
					{
						DslDiagrams::CompartmentShape compartmentShape = pel as DslDiagrams::CompartmentShape;
						if (compartmentShape != null && shapeType.IsAssignableFrom(compartmentShape.GetType()))
						{
							if (repaintOnly)
							{
								compartmentShape.Invalidate();
							}
							else
							{
								foreach(DslDiagrams::CompartmentMapping mapping in compartmentShape.GetCompartmentMappings())
								{
									if(mapping.CompartmentId==compartmentName)
									{
										mapping.InitializeCompartmentShape(compartmentShape);
										break;
									}
								}
							}
						}
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Rule to update compartments when an items is removed from the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ClassHasAttributes), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ClassHasOperations), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.InterfaceHasOperation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemDeleteRule : DslModeling::DeleteRule
		{
			/// <summary>
			/// Called when an element is deleted
			/// </summary>
			/// <param name="e"></param>
			public override void ElementDeleted(DslModeling::ElementDeletedEventArgs e)
			{
				ElementDeleted(e, false);
			}
			
			internal static void ElementDeleted(DslModeling::ElementDeletedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::LinqToRdf.Design.ClassHasAttributes)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::LinqToRdf.Design.ClassHasAttributes)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "AttributesCompartment", repaintOnly);
				}
				if(e.ModelElement is global::LinqToRdf.Design.ClassHasOperations)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelClassForClassShapeOperationsCompartmentFromLastLink((global::LinqToRdf.Design.ClassHasOperations)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "OperationsCompartment", repaintOnly);
				}
				if(e.ModelElement is global::LinqToRdf.Design.InterfaceHasOperation)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelInterfaceForInterfaceShapeOperationsCompartmentFromLastLink((global::LinqToRdf.Design.InterfaceHasOperation)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.InterfaceShape), "OperationsCompartment", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when the property on an item being displayed changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ModelAttribute), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ClassOperation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.InterfaceOperation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemChangeRule : DslModeling::ChangeRule 
		{
			/// <summary>
			/// Called when an element is changed
			/// </summary>
			/// <param name="e"></param>
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				ElementPropertyChanged(e, false);
			}
			
			internal static void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::LinqToRdf.Design.ModelAttribute && e.DomainProperty.Id == global::LinqToRdf.Design.ModelAttribute.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartment((global::LinqToRdf.Design.ModelAttribute)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "AttributesCompartment", repaintOnly);
				}
				if(e.ModelElement is global::LinqToRdf.Design.ClassOperation && e.DomainProperty.Id == global::LinqToRdf.Design.ClassOperation.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeOperationsCompartment((global::LinqToRdf.Design.ClassOperation)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "OperationsCompartment", repaintOnly);
				}
				if(e.ModelElement is global::LinqToRdf.Design.InterfaceOperation && e.DomainProperty.Id == global::LinqToRdf.Design.InterfaceOperation.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelInterfaceForInterfaceShapeOperationsCompartment((global::LinqToRdf.Design.InterfaceOperation)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.InterfaceShape), "OperationsCompartment", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when a roleplayer change happens
		/// </summary>
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ClassHasAttributes), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ClassHasOperations), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.InterfaceHasOperation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerChangeRule : DslModeling::RolePlayerChangeRule 
		{
			/// <summary>
			/// Called when the roleplayer on a link changes.
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				RolePlayerChanged(e, false);
			}
			
			internal static void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::LinqToRdf.Design.ClassHasAttributes).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::LinqToRdf.Design.ModelAttribute)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::LinqToRdf.Design.ClassShape compartmentShape = pel as global::LinqToRdf.Design.ClassShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::LinqToRdf.Design.ClassHasAttributes)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "AttributesCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartment((global::LinqToRdf.Design.ModelAttribute)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "AttributesCompartment", repaintOnly);
					}
				}
				if(typeof(global::LinqToRdf.Design.ClassHasOperations).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetModelClassForClassShapeOperationsCompartmentFromLastLink((global::LinqToRdf.Design.ClassOperation)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::LinqToRdf.Design.ClassShape compartmentShape = pel as global::LinqToRdf.Design.ClassShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[1].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeOperationsCompartmentFromLastLink((global::LinqToRdf.Design.ClassHasOperations)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "OperationsCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeOperationsCompartment((global::LinqToRdf.Design.ClassOperation)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "OperationsCompartment", repaintOnly);
					}
				}
				if(typeof(global::LinqToRdf.Design.InterfaceHasOperation).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetModelInterfaceForInterfaceShapeOperationsCompartmentFromLastLink((global::LinqToRdf.Design.InterfaceOperation)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::LinqToRdf.Design.InterfaceShape compartmentShape = pel as global::LinqToRdf.Design.InterfaceShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelInterfaceForInterfaceShapeOperationsCompartmentFromLastLink((global::LinqToRdf.Design.InterfaceHasOperation)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.InterfaceShape), "OperationsCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelInterfaceForInterfaceShapeOperationsCompartment((global::LinqToRdf.Design.InterfaceOperation)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.InterfaceShape), "OperationsCompartment", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// Rule to update compartments when the order of items in the list changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ClassHasAttributes), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.ClassHasOperations), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.InterfaceHasOperation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerPositionChangeRule : DslModeling::RolePlayerPositionChangeRule 
		{
			/// <summary>
			/// Called when the order of a roleplayer in a relationship changes
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e)
			{
				RolePlayerPositionChanged(e, false);
			}
			
			internal static void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::LinqToRdf.Design.ClassHasAttributes).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartment((global::LinqToRdf.Design.ModelAttribute)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "AttributesCompartment", repaintOnly);
					}
				}
				if(typeof(global::LinqToRdf.Design.ClassHasOperations).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeOperationsCompartment((global::LinqToRdf.Design.ClassOperation)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.ClassShape), "OperationsCompartment", repaintOnly);
					}
				}
				if(typeof(global::LinqToRdf.Design.InterfaceHasOperation).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelInterfaceForInterfaceShapeOperationsCompartment((global::LinqToRdf.Design.InterfaceOperation)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::LinqToRdf.Design.InterfaceShape), "OperationsCompartment", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Association), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.MultipleAssociationRole), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::LinqToRdf.Design.Association.SourceMultiplicityDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::LinqToRdf.Design.BidirectionalConnector.FindBidirectionalConnectorDecorator("SourceMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.BidirectionalAssociation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.UnidirectionalConnector.FindUnidirectionalConnectorDecorator("SourceMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.UnidirectionalAssociation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.AggregationConnector.FindAggregationConnectorDecorator("SourceMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.Aggregation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.CompositionConnector.FindCompositionConnectorDecorator("SourceMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.Composition.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::LinqToRdf.Design.Association.TargetMultiplicityDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::LinqToRdf.Design.BidirectionalConnector.FindBidirectionalConnectorDecorator("TargetMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.BidirectionalAssociation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.UnidirectionalConnector.FindUnidirectionalConnectorDecorator("TargetMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.UnidirectionalAssociation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.AggregationConnector.FindAggregationConnectorDecorator("TargetMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.Aggregation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.CompositionConnector.FindCompositionConnectorDecorator("TargetMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.Composition.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::LinqToRdf.Design.Association.SourceRoleNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::LinqToRdf.Design.BidirectionalConnector.FindBidirectionalConnectorDecorator("SourceRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.BidirectionalAssociation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.UnidirectionalConnector.FindUnidirectionalConnectorDecorator("SourceRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.UnidirectionalAssociation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.AggregationConnector.FindAggregationConnectorDecorator("SourceRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.Aggregation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.CompositionConnector.FindCompositionConnectorDecorator("SourceRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.Composition.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::LinqToRdf.Design.Association.TargetRoleNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::LinqToRdf.Design.BidirectionalConnector.FindBidirectionalConnectorDecorator("TargetRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.BidirectionalAssociation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.UnidirectionalConnector.FindUnidirectionalConnectorDecorator("TargetRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.UnidirectionalAssociation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.AggregationConnector.FindAggregationConnectorDecorator("TargetRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.Aggregation.DomainClassId);
					}
					decorator = global::LinqToRdf.Design.CompositionConnector.FindCompositionConnectorDecorator("TargetRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.Composition.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::LinqToRdf.Design.MultipleAssociationRole.MultiplicityDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::LinqToRdf.Design.MultipleAssociationRoleConnector.FindMultipleAssociationRoleConnectorDecorator("TargetMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.MultipleAssociationRole.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::LinqToRdf.Design.MultipleAssociationRole.RoleNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::LinqToRdf.Design.MultipleAssociationRoleConnector.FindMultipleAssociationRoleConnectorDecorator("TargetRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::LinqToRdf.Design.MultipleAssociationRole.DomainClassId);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.BidirectionalAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.UnidirectionalAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Aggregation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Composition), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.MultipleAssociationRole), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.AssociationClassRelationship), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.CommentReferencesSubjects), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Generalization), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::LinqToRdf.Design.Implementation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::LinqToRdf.Design.ClassDiagram diagram = linkShape.Diagram as global::LinqToRdf.Design.ClassDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
