//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.NamedElement.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.NamedElement.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("aa8ceb19-1365-494a-9a4d-f603bde8f7b5")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa8ceb19, 0x1365, 0x494a, 0x9a, 0x4d, 0xf6, 0x03, 0xbd, 0xe8, 0xf7, 0xb5);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x477eff20, 0xa9e7, 0x4259, 0x91, 0xcf, 0x14, 0xb0, 0x45, 0x30, 0xd2, 0x40);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.NamedElement/Name.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.NamedElement/Name.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("477eff20-a9e7-4259-91cf-14b04530d240")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass ModelRoot
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelRoot.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ModelRoot.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e5e354cc-3d37-4fc1-b361-1342f6a4f781")]
	public partial class ModelRoot : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe5e354cc, 0x3d37, 0x4fc1, 0xb3, 0x61, 0x13, 0x42, 0xf6, 0xa4, 0xf7, 0x81);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region OntologyUri domain property code
		
		/// <summary>
		/// OntologyUri domain property Id.
		/// </summary>
		public static readonly global::System.Guid OntologyUriDomainPropertyId = new global::System.Guid(0x123f6d62, 0xe8ea, 0x44b9, 0xa4, 0x9a, 0x07, 0x27, 0xb2, 0xcd, 0x19, 0x99);
		
		/// <summary>
		/// Storage for OntologyUri
		/// </summary>
		private global::System.String ontologyUriPropertyStorage = "http://tempuri.com/ontology/";
		
		/// <summary>
		/// Gets or sets the value of OntologyUri domain property.
		/// Description for LinqToRdf.Designer.ModelRoot.Ontology Uri
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelRoot/OntologyUri.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("LinqToRdf.Design.ModelRoot/OntologyUri.Category", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelRoot/OntologyUri.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("http://tempuri.com/ontology/")]
		[DslModeling::DomainObjectId("123f6d62-e8ea-44b9-a49a-0727b2cd1999")]
		public global::System.String OntologyUri
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ontologyUriPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OntologyUriPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.OntologyUri domain property.
		/// </summary>
		internal sealed partial class OntologyUriPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private OntologyUriPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.OntologyUri domain property value handler.
			/// </summary>
			public static readonly OntologyUriPropertyHandler Instance = new OntologyUriPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.OntologyUri domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OntologyUriDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ontologyUriPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.ontologyUriPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Comments opposite domain role accessor
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Comment>(this, global::LinqToRdf.Design.ModelRootHasComments.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Types opposite domain role accessor
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelType>(this, global::LinqToRdf.Design.ModelRootHasTypes.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::LinqToRdf.Design.ModelType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::LinqToRdf.Design.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::LinqToRdf.Design.ModelType sourceModelType1 = sourceElement as global::LinqToRdf.Design.ModelType;
			if (sourceModelType1 != null)
			{
				// Create link for path ModelRootHasTypes.Types
				this.Types.Add(sourceModelType1);

				return;
			}
				
			global::LinqToRdf.Design.Comment sourceComment2 = sourceElement as global::LinqToRdf.Design.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path ModelRootHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::LinqToRdf.Design.ModelType sourceModelType1 = sourceElement as global::LinqToRdf.Design.ModelType;
			if (sourceModelType1 != null)
			{
				// Delete link for path ModelRootHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::LinqToRdf.Design.ModelRootHasTypes.GetLinks((global::LinqToRdf.Design.ModelRoot)this, sourceModelType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::LinqToRdf.Design.ModelRootHasTypes.ModelRootDomainRoleId, global::LinqToRdf.Design.ModelRootHasTypes.TypeDomainRoleId);
				}

				return;
			}
				
			global::LinqToRdf.Design.Comment sourceComment2 = sourceElement as global::LinqToRdf.Design.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path ModelRootHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::LinqToRdf.Design.ModelRootHasComments.GetLinks((global::LinqToRdf.Design.ModelRoot)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::LinqToRdf.Design.ModelRootHasComments.ModelRootDomainRoleId, global::LinqToRdf.Design.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass ModelClass
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelClass.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ModelClass.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("46719b16-b29a-4a3c-8e79-8f809ef31bd8")]
	public partial class ModelClass : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x46719b16, 0xb29a, 0x4a3c, 0x8e, 0x79, 0x8f, 0x80, 0x9e, 0xf3, 0x1b, 0xd8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Kind domain property code
		
		/// <summary>
		/// Kind domain property Id.
		/// </summary>
		public static readonly global::System.Guid KindDomainPropertyId = new global::System.Guid(0xe00fbf12, 0xead7, 0x4432, 0x8d, 0x5d, 0x7e, 0xdc, 0x9f, 0x64, 0xb2, 0xdc);
		
		/// <summary>
		/// Storage for Kind
		/// </summary>
		private global::System.String kindPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Kind domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelClass/Kind.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelClass/Kind.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("e00fbf12-ead7-4432-8d5d-7edc9f64b2dc")]
		public global::System.String Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return kindPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KindPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Kind domain property.
		/// </summary>
		internal sealed partial class KindPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private KindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Kind domain property value handler.
			/// </summary>
			public static readonly KindPropertyHandler Instance = new KindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Kind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.kindPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.kindPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0x302169d7, 0xa2d0, 0x438f, 0xb9, 0xd0, 0x60, 0x2c, 0x36, 0x5f, 0x3a, 0x36);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private InheritanceModifier isAbstractPropertyStorage = InheritanceModifier.None;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelClass/IsAbstract.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelClass/IsAbstract.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(InheritanceModifier.None)]
		[DslModeling::DomainObjectId("302169d7-a2d0-438f-b9d0-602c365f3a36")]
		public InheritanceModifier IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, InheritanceModifier>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed InheritanceModifier GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, InheritanceModifier newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				InheritanceModifier oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ResourceUri domain property code
		
		/// <summary>
		/// ResourceUri domain property Id.
		/// </summary>
		public static readonly global::System.Guid ResourceUriDomainPropertyId = new global::System.Guid(0xa0b509c7, 0x9eac, 0x4999, 0xa7, 0x11, 0x00, 0xcf, 0xcc, 0x1c, 0xed, 0xa5);
		
		/// <summary>
		/// Storage for ResourceUri
		/// </summary>
		private global::System.String resourceUriPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ResourceUri domain property.
		/// Description for LinqToRdf.Designer.ModelClass.Resource Uri
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelClass/ResourceUri.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelClass/ResourceUri.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a0b509c7-9eac-4999-a711-00cfcc1ceda5")]
		public global::System.String ResourceUri
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return resourceUriPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ResourceUriPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.ResourceUri domain property.
		/// </summary>
		internal sealed partial class ResourceUriPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private ResourceUriPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.ResourceUri domain property value handler.
			/// </summary>
			public static readonly ResourceUriPropertyHandler Instance = new ResourceUriPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.ResourceUri domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ResourceUriDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.resourceUriPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.resourceUriPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Targets opposite domain role accessor
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ModelClass> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.Association.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ModelClass> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.Association.TargetDomainRoleId);
			}
		}
		#endregion
		#region UnidirectionalTargets opposite domain role accessor
		/// <summary>
		/// Gets a list of UnidirectionalTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> UnidirectionalTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
			}
		}
		#endregion
		#region UnidirectionalSources opposite domain role accessor
		/// <summary>
		/// Gets a list of UnidirectionalSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> UnidirectionalSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.UnidirectionalAssociation.UnidirectionalTargetDomainRoleId);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelAttribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelAttribute>(this, global::LinqToRdf.Design.ClassHasAttributes.ModelClassDomainRoleId);
			}
		}
		#endregion
		#region Operations opposite domain role accessor
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ClassOperation> Operations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ClassOperation>(this, global::LinqToRdf.Design.ClassHasOperations.ModelClassDomainRoleId);
			}
		}
		#endregion
		#region Subclasses opposite domain role accessor
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Subclasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.Generalization.SuperclassDomainRoleId);
			}
		}
		#endregion
		#region Superclass opposite domain role accessor
		/// <summary>
		/// Gets or sets Superclass.
		/// </summary>
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::LinqToRdf.Design.Generalization.SubclassDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::LinqToRdf.Design.Generalization.SubclassDomainRoleId, value);
			}
		}
		#endregion
		#region BidirectionalTargets opposite domain role accessor
		/// <summary>
		/// Gets a list of BidirectionalTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> BidirectionalTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
			}
		}
		#endregion
		#region BidirectionalSources opposite domain role accessor
		/// <summary>
		/// Gets a list of BidirectionalSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> BidirectionalSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.BidirectionalAssociation.BidirectionalTargetDomainRoleId);
			}
		}
		#endregion
		#region MultipleAssociations opposite domain role accessor
		/// <summary>
		/// Gets a list of MultipleAssociations.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MultipleAssociation> MultipleAssociations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<MultipleAssociation>(this, global::LinqToRdf.Design.MultipleAssociationRole.TypeDomainRoleId);
			}
		}
		#endregion
		#region MultipleAssociation opposite domain role accessor
		/// <summary>
		/// Gets or sets MultipleAssociation.
		/// </summary>
		public virtual MultipleAssociation MultipleAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::LinqToRdf.Design.AssociationClassRelationship.AssociationClassDomainRoleId) as MultipleAssociation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::LinqToRdf.Design.AssociationClassRelationship.AssociationClassDomainRoleId, value);
			}
		}
		#endregion
		#region AggregationTargets opposite domain role accessor
		/// <summary>
		/// Gets a list of AggregationTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> AggregationTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.Aggregation.AggregationSourceDomainRoleId);
			}
		}
		#endregion
		#region AggregationSources opposite domain role accessor
		/// <summary>
		/// Gets a list of AggregationSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> AggregationSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.Aggregation.AggregationTargetDomainRoleId);
			}
		}
		#endregion
		#region CompositionTargets opposite domain role accessor
		/// <summary>
		/// Gets a list of CompositionTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> CompositionTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.Composition.CompositionSourceDomainRoleId);
			}
		}
		#endregion
		#region CompositionSources opposite domain role accessor
		/// <summary>
		/// Gets a list of CompositionSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> CompositionSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.Composition.CompositionTargetDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::LinqToRdf.Design.ClassOperation.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::LinqToRdf.Design.ModelAttribute.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::LinqToRdf.Design.ClassOperation sourceClassOperation1 = sourceElement as global::LinqToRdf.Design.ClassOperation;
			if (sourceClassOperation1 != null)
			{
				// Create link for path ClassHasOperations.Operations
				this.Operations.Add(sourceClassOperation1);

				return;
			}
				
			global::LinqToRdf.Design.ModelAttribute sourceModelAttribute2 = sourceElement as global::LinqToRdf.Design.ModelAttribute;
			if (sourceModelAttribute2 != null)
			{
				// Create link for path ClassHasAttributes.Attributes
				this.Attributes.Add(sourceModelAttribute2);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::LinqToRdf.Design.ClassOperation sourceClassOperation1 = sourceElement as global::LinqToRdf.Design.ClassOperation;
			if (sourceClassOperation1 != null)
			{
				// Delete link for path ClassHasOperations.Operations
				
				foreach (DslModeling::ElementLink link in global::LinqToRdf.Design.ClassHasOperations.GetLinks((global::LinqToRdf.Design.ModelClass)this, sourceClassOperation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::LinqToRdf.Design.ClassHasOperations.ModelClassDomainRoleId, global::LinqToRdf.Design.ClassHasOperations.OperationDomainRoleId);
				}

				return;
			}
				
			global::LinqToRdf.Design.ModelAttribute sourceModelAttribute2 = sourceElement as global::LinqToRdf.Design.ModelAttribute;
			if (sourceModelAttribute2 != null)
			{
				// Delete link for path ClassHasAttributes.Attributes
				
				foreach (DslModeling::ElementLink link in global::LinqToRdf.Design.ClassHasAttributes.GetLinks((global::LinqToRdf.Design.ModelClass)this, sourceModelAttribute2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::LinqToRdf.Design.ClassHasAttributes.ModelClassDomainRoleId, global::LinqToRdf.Design.ClassHasAttributes.AttributeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass ModelAttribute
	/// An attribute of a class.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelAttribute.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ModelAttribute.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("720e58f2-c974-42da-8421-72815247ebf0")]
	public partial class ModelAttribute : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x720e58f2, 0xc974, 0x42da, 0x84, 0x21, 0x72, 0x81, 0x52, 0x47, 0xeb, 0xf0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x207b03d6, 0x4195, 0x44be, 0xa1, 0xb3, 0xad, 0x4f, 0x88, 0x75, 0xaf, 0xef);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelAttribute/Type.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelAttribute/Type.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("207b03d6-4195-44be-a1b3-ad4f8875afef")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InitialValue domain property code
		
		/// <summary>
		/// InitialValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid InitialValueDomainPropertyId = new global::System.Guid(0x348e0db2, 0xde99, 0x4c62, 0x94, 0x4a, 0xab, 0x49, 0xed, 0xa8, 0x89, 0x3e);
		
		/// <summary>
		/// Storage for InitialValue
		/// </summary>
		private global::System.String initialValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InitialValue domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelAttribute/InitialValue.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelAttribute/InitialValue.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("348e0db2-de99-4c62-944a-ab49eda8893e")]
		public global::System.String InitialValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return initialValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InitialValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.InitialValue domain property.
		/// </summary>
		internal sealed partial class InitialValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private InitialValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.InitialValue domain property value handler.
			/// </summary>
			public static readonly InitialValuePropertyHandler Instance = new InitialValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.InitialValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InitialValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.initialValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.initialValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0xcbc3355f, 0xefad, 0x4bc7, 0xb6, 0x54, 0xc6, 0xb7, 0xe4, 0xa9, 0x75, 0x7f);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private global::System.String multiplicityPropertyStorage = "1";
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelAttribute/Multiplicity.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelAttribute/Multiplicity.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("1")]
		[DslModeling::DomainObjectId("cbc3355f-efad-4bc7-b654-c6b7e4a9757f")]
		public global::System.String Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.multiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ResourceUri domain property code
		
		/// <summary>
		/// ResourceUri domain property Id.
		/// </summary>
		public static readonly global::System.Guid ResourceUriDomainPropertyId = new global::System.Guid(0xf31eac65, 0xf0dd, 0x44d8, 0x99, 0x3c, 0x30, 0x34, 0xfa, 0xee, 0x19, 0x29);
		
		/// <summary>
		/// Storage for ResourceUri
		/// </summary>
		private global::System.String resourceUriPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ResourceUri domain property.
		/// Description for LinqToRdf.Designer.ModelAttribute.Resource Uri
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelAttribute/ResourceUri.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelAttribute/ResourceUri.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f31eac65-f0dd-44d8-993c-3034faee1929")]
		public global::System.String ResourceUri
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return resourceUriPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ResourceUriPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.ResourceUri domain property.
		/// </summary>
		internal sealed partial class ResourceUriPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private ResourceUriPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.ResourceUri domain property value handler.
			/// </summary>
			public static readonly ResourceUriPropertyHandler Instance = new ResourceUriPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.ResourceUri domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ResourceUriDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.resourceUriPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.resourceUriPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelClass opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelClass.
		/// </summary>
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::LinqToRdf.Design.ClassHasAttributes.AttributeDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::LinqToRdf.Design.ClassHasAttributes.AttributeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.Comment.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.Comment.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7466f437-bdeb-420c-8293-1746951dc914")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7466f437, 0xbdeb, 0x420c, 0x82, 0x93, 0x17, 0x46, 0x95, 0x1d, 0xc9, 0x14);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xeea5cf79, 0x9eb7, 0x4815, 0xad, 0xe2, 0xdc, 0x8f, 0x3f, 0x62, 0x91, 0xe5);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Comment/Text.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Comment/Text.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("eea5cf79-9eb7-4815-ade2-dc8f3f6291e5")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::LinqToRdf.Design.ModelRootHasComments.CommentDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::LinqToRdf.Design.ModelRootHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelType>(this, global::LinqToRdf.Design.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass Operation
	/// An Operation of a Class.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.Operation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.Operation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ca947cf1-1e5c-4506-9702-846d3e974bf3")]
	public abstract partial class Operation : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Operation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xca947cf1, 0x1e5c, 0x4506, 0x97, 0x02, 0x84, 0x6d, 0x3e, 0x97, 0x4b, 0xf3);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Operation(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Signature domain property code
		
		/// <summary>
		/// Signature domain property Id.
		/// </summary>
		public static readonly global::System.Guid SignatureDomainPropertyId = new global::System.Guid(0x939972e1, 0xc419, 0x4477, 0x9e, 0x77, 0x86, 0xd7, 0x3f, 0x97, 0xfd, 0x7c);
		
		/// <summary>
		/// Storage for Signature
		/// </summary>
		private global::System.String signaturePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Signature domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Operation/Signature.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Operation/Signature.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("939972e1-c419-4477-9e77-86d73f97fd7c")]
		public global::System.String Signature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return signaturePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SignaturePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Signature domain property.
		/// </summary>
		internal sealed partial class SignaturePropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private SignaturePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Signature domain property value handler.
			/// </summary>
			public static readonly SignaturePropertyHandler Instance = new SignaturePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Signature domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SignatureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.signaturePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.signaturePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Concurrency domain property code
		
		/// <summary>
		/// Concurrency domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConcurrencyDomainPropertyId = new global::System.Guid(0x8c6c9a96, 0x099a, 0x4fe3, 0xba, 0xac, 0x2c, 0x68, 0x5f, 0x40, 0x48, 0x9b);
		
		/// <summary>
		/// Storage for Concurrency
		/// </summary>
		private OperationConcurrency concurrencyPropertyStorage = OperationConcurrency.Sequential;
		
		/// <summary>
		/// Gets or sets the value of Concurrency domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Operation/Concurrency.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Operation/Concurrency.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(OperationConcurrency.Sequential)]
		[DslModeling::DomainObjectId("8c6c9a96-099a-4fe3-baac-2c685f40489b")]
		public OperationConcurrency Concurrency
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return concurrencyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConcurrencyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Concurrency domain property.
		/// </summary>
		internal sealed partial class ConcurrencyPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, OperationConcurrency>
		{
			private ConcurrencyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Concurrency domain property value handler.
			/// </summary>
			public static readonly ConcurrencyPropertyHandler Instance = new ConcurrencyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Concurrency domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConcurrencyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed OperationConcurrency GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.concurrencyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, OperationConcurrency newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				OperationConcurrency oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.concurrencyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Precondition domain property code
		
		/// <summary>
		/// Precondition domain property Id.
		/// </summary>
		public static readonly global::System.Guid PreconditionDomainPropertyId = new global::System.Guid(0xc203b9bb, 0xa541, 0x4714, 0xa8, 0xce, 0x33, 0xb9, 0xb0, 0x1d, 0xbc, 0xa2);
		
		/// <summary>
		/// Storage for Precondition
		/// </summary>
		private global::System.String preconditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Precondition domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Operation/Precondition.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Operation/Precondition.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("c203b9bb-a541-4714-a8ce-33b9b01dbca2")]
		public global::System.String Precondition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return preconditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PreconditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Precondition domain property.
		/// </summary>
		internal sealed partial class PreconditionPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private PreconditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Precondition domain property value handler.
			/// </summary>
			public static readonly PreconditionPropertyHandler Instance = new PreconditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Precondition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PreconditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.preconditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.preconditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Postcondition domain property code
		
		/// <summary>
		/// Postcondition domain property Id.
		/// </summary>
		public static readonly global::System.Guid PostconditionDomainPropertyId = new global::System.Guid(0x7f54dae7, 0xa807, 0x489b, 0x8b, 0x59, 0x68, 0x4c, 0x77, 0xb3, 0x35, 0xb0);
		
		/// <summary>
		/// Storage for Postcondition
		/// </summary>
		private global::System.String postconditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Postcondition domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Operation/Postcondition.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Operation/Postcondition.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("7f54dae7-a807-489b-8b59-684c77b335b0")]
		public global::System.String Postcondition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return postconditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PostconditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Postcondition domain property.
		/// </summary>
		internal sealed partial class PostconditionPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private PostconditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Postcondition domain property value handler.
			/// </summary>
			public static readonly PostconditionPropertyHandler Instance = new PostconditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Postcondition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PostconditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.postconditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.postconditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass ClassOperation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassOperation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ClassOperation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ffa2ad21-b6ef-4b69-856a-6173e10aa940")]
	public partial class ClassOperation : Operation
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xffa2ad21, 0xb6ef, 0x4b69, 0x85, 0x6a, 0x61, 0x73, 0xe1, 0x0a, 0xa9, 0x40);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassOperation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassOperation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0xed0ea143, 0x8596, 0x4e4f, 0x8b, 0x99, 0x1f, 0x01, 0x19, 0x68, 0xb8, 0xf7);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private global::System.Boolean isAbstractPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassOperation/IsAbstract.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ClassOperation/IsAbstract.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ed0ea143-8596-4e4f-8b99-1f011968b8f7")]
		public global::System.Boolean IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassOperation.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassOperation, global::System.Boolean>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassOperation.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassOperation.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ClassOperation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassOperation element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelClass opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelClass.
		/// </summary>
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::LinqToRdf.Design.ClassHasOperations.OperationDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::LinqToRdf.Design.ClassHasOperations.OperationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass ModelInterface
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelInterface.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ModelInterface.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a6d2867b-9f5d-4859-b1c9-82910ca614e3")]
	public partial class ModelInterface : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelInterface domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6d2867b, 0x9f5d, 0x4859, 0xb1, 0xc9, 0x82, 0x91, 0x0c, 0xa6, 0x14, 0xe3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelInterface(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelInterface(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Operations opposite domain role accessor
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InterfaceOperation> Operations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<InterfaceOperation>(this, global::LinqToRdf.Design.InterfaceHasOperation.InterfaceDomainRoleId);
			}
		}
		#endregion
		#region Implementors opposite domain role accessor
		/// <summary>
		/// Gets a list of Implementors.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Implementors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelType>(this, global::LinqToRdf.Design.Implementation.ImplementDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::LinqToRdf.Design.InterfaceOperation.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::LinqToRdf.Design.InterfaceOperation sourceInterfaceOperation1 = sourceElement as global::LinqToRdf.Design.InterfaceOperation;
			if (sourceInterfaceOperation1 != null)
			{
				// Create link for path InterfaceHasOperation.Operations
				this.Operations.Add(sourceInterfaceOperation1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::LinqToRdf.Design.InterfaceOperation sourceInterfaceOperation1 = sourceElement as global::LinqToRdf.Design.InterfaceOperation;
			if (sourceInterfaceOperation1 != null)
			{
				// Delete link for path InterfaceHasOperation.Operations
				
				foreach (DslModeling::ElementLink link in global::LinqToRdf.Design.InterfaceHasOperation.GetLinks((global::LinqToRdf.Design.ModelInterface)this, sourceInterfaceOperation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::LinqToRdf.Design.InterfaceHasOperation.InterfaceDomainRoleId, global::LinqToRdf.Design.InterfaceHasOperation.OperationDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass InterfaceOperation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.InterfaceOperation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.InterfaceOperation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9f1e02da-3dbf-441d-a6d5-a836b83c9734")]
	public partial class InterfaceOperation : Operation
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InterfaceOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9f1e02da, 0x3dbf, 0x441d, 0xa6, 0xd5, 0xa8, 0x36, 0xb8, 0x3c, 0x97, 0x34);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InterfaceOperation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InterfaceOperation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Interface opposite domain role accessor
		/// <summary>
		/// Gets or sets Interface.
		/// </summary>
		public virtual ModelInterface Interface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::LinqToRdf.Design.InterfaceHasOperation.OperationDomainRoleId) as ModelInterface;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::LinqToRdf.Design.InterfaceHasOperation.OperationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass MultipleAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.MultipleAssociation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.MultipleAssociation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d44af1d2-fe7b-4283-a398-ba8a9692c080")]
	public partial class MultipleAssociation : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MultipleAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd44af1d2, 0xfe7b, 0x4283, 0xa3, 0x98, 0xba, 0x8a, 0x96, 0x92, 0xc0, 0x80);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MultipleAssociation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MultipleAssociation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Types opposite domain role accessor
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::LinqToRdf.Design.MultipleAssociationRole.MultipleAssociationDomainRoleId);
			}
		}
		#endregion
		#region AssociationClass opposite domain role accessor
		/// <summary>
		/// Gets or sets AssociationClass.
		/// </summary>
		public virtual ModelClass AssociationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::LinqToRdf.Design.AssociationClassRelationship.MultipleAssociationDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::LinqToRdf.Design.AssociationClassRelationship.MultipleAssociationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass ModelType
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelType.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ModelType.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3094eaa6-4213-42b9-be7f-ae75a895859b")]
	public abstract partial class ModelType : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3094eaa6, 0x4213, 0x42b9, 0xbe, 0x7f, 0xae, 0x75, 0xa8, 0x95, 0x85, 0x9b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::LinqToRdf.Design.ModelRootHasTypes.TypeDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::LinqToRdf.Design.ModelRootHasTypes.TypeDomainRoleId, value);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Comment>(this, global::LinqToRdf.Design.CommentReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region Implements opposite domain role accessor
		/// <summary>
		/// Gets a list of Implements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelInterface> Implements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelInterface>(this, global::LinqToRdf.Design.Implementation.ImplementorDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::LinqToRdf.Design.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::LinqToRdf.Design.Comment sourceComment1 = sourceElement as global::LinqToRdf.Design.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path CommentReferencesSubjects.Comments
				this.Comments.Add(sourceComment1);

				// Create link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
						// Segments 0 and 1
						global::LinqToRdf.Design.ModelRoot commentHost1 = this.ModelRoot;
						if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				commentHost1.Comments.Add(sourceComment1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::LinqToRdf.Design.Comment sourceComment1 = sourceElement as global::LinqToRdf.Design.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path CommentReferencesSubjects.Comments
				
				foreach (DslModeling::ElementLink link in global::LinqToRdf.Design.CommentReferencesSubjects.GetLinks(sourceComment1, (global::LinqToRdf.Design.ModelType)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::LinqToRdf.Design.CommentReferencesSubjects.SubjectDomainRoleId, global::LinqToRdf.Design.CommentReferencesSubjects.CommentDomainRoleId);
				}

				// Delete link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
					// Segments 0 and 1
					global::LinqToRdf.Design.ModelRoot commentHost1 = this.ModelRoot;
					if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::LinqToRdf.Design.ModelRootHasComments.GetLinks((global::LinqToRdf.Design.ModelRoot)commentHost1, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::LinqToRdf.Design.ModelRootHasComments.ModelRootDomainRoleId, global::LinqToRdf.Design.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainClass ClassModelElement
	/// Element with a Description
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassModelElement.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ClassModelElement.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4d9b3906-e15e-4e63-96b9-00b8911385e0")]
	public abstract partial class ClassModelElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d9b3906, 0xe15e, 0x4e63, 0x96, 0xb9, 0x00, 0xb8, 0x91, 0x13, 0x85, 0xe0);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ClassModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xa242cb91, 0x3e2f, 0x4a4f, 0x8e, 0x0a, 0xb2, 0x27, 0x90, 0x5d, 0xf2, 0xa9);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// This is a Description.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassModelElement/Description.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ClassModelElement/Description.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("a242cb91-3e2f-4a4f-8e0a-b227905df2a9")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassModelElement.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassModelElement, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassModelElement.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassModelElement.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassModelElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassModelElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
