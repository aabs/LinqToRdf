//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship Association
	/// Associations between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.Association.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.Association.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("a7c59162-a60a-4482-a418-35117e7c53e1")]
	public abstract partial class Association : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Association domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa7c59162, 0xa60a, 0x4482, 0xa4, 0x18, 0x35, 0x11, 0x7e, 0x7c, 0x53, 0xe1);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected Association(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xea7c607f, 0xba2f, 0x4f71, 0x94, 0x4d, 0xab, 0xba, 0x7c, 0x1e, 0xfe, 0xd8);
		
		/// <summary>
		/// DomainRole Source
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Association/Source.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Association/Source.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="LinqToRdf.Design.Association/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ea7c607f-ba2f-4f71-944d-abba7c1efed8")]
		public abstract ModelClass Source
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Sources of a ModelClass
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetSources(ModelClass element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x3502426b, 0x1ed4, 0x44c8, 0xa3, 0x15, 0x53, 0x4b, 0xf2, 0x1b, 0x68, 0x71);
		
		/// <summary>
		/// DomainRole Target
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Association/Target.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Association/Target.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="LinqToRdf.Design.Association/Target.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3502426b-1ed4-44c8-a315-534bf21b6871")]
		public abstract ModelClass Target
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Targets of a ModelClass
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetTargets(ModelClass element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(element, SourceDomainRoleId);
		}
		#endregion
		#region SourceMultiplicity domain property code
		
		/// <summary>
		/// SourceMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceMultiplicityDomainPropertyId = new global::System.Guid(0x3359d2ea, 0x15a2, 0x4ae9, 0xa3, 0x6d, 0x0f, 0x9a, 0xb0, 0x61, 0xa3, 0x9e);
		
		/// <summary>
		/// Storage for SourceMultiplicity
		/// </summary>
		private Multiplicity sourceMultiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of SourceMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Association/SourceMultiplicity.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Association/SourceMultiplicity.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3359d2ea-15a2-4ae9-a36d-0f9ab061a39e")]
		public Multiplicity SourceMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceMultiplicity domain property.
		/// </summary>
		internal sealed partial class SourceMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private SourceMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceMultiplicity domain property value handler.
			/// </summary>
			public static readonly SourceMultiplicityPropertyHandler Instance = new SourceMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceRoleName domain property code
		
		/// <summary>
		/// SourceRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceRoleNameDomainPropertyId = new global::System.Guid(0x752c7990, 0xf99c, 0x4bb1, 0xb9, 0x4b, 0x49, 0x1c, 0x15, 0x12, 0x34, 0x91);
		
		/// <summary>
		/// Storage for SourceRoleName
		/// </summary>
		private global::System.String sourceRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Association/SourceRoleName.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Association/SourceRoleName.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("752c7990-f99c-4bb1-b94b-491c15123491")]
		public global::System.String SourceRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceRoleName domain property.
		/// </summary>
		internal sealed partial class SourceRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private SourceRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceRoleName domain property value handler.
			/// </summary>
			public static readonly SourceRoleNamePropertyHandler Instance = new SourceRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetMultiplicity domain property code
		
		/// <summary>
		/// TargetMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetMultiplicityDomainPropertyId = new global::System.Guid(0xce1f5a08, 0xfb9c, 0x4d89, 0xbc, 0xf4, 0x42, 0xcd, 0xac, 0xa0, 0xfd, 0x5c);
		
		/// <summary>
		/// Storage for TargetMultiplicity
		/// </summary>
		private Multiplicity targetMultiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of TargetMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Association/TargetMultiplicity.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Association/TargetMultiplicity.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ce1f5a08-fb9c-4d89-bcf4-42cdaca0fd5c")]
		public Multiplicity TargetMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetMultiplicity domain property.
		/// </summary>
		internal sealed partial class TargetMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private TargetMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetMultiplicity domain property value handler.
			/// </summary>
			public static readonly TargetMultiplicityPropertyHandler Instance = new TargetMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetRoleName domain property code
		
		/// <summary>
		/// TargetRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleNameDomainPropertyId = new global::System.Guid(0xe83a84b4, 0x0ea6, 0x4d31, 0x82, 0x4b, 0xe5, 0x71, 0x33, 0x0b, 0x90, 0xaa);
		
		/// <summary>
		/// Storage for TargetRoleName
		/// </summary>
		private global::System.String targetRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Association/TargetRoleName.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Association/TargetRoleName.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("e83a84b4-0ea6-4d31-824b-e571330b90aa")]
		public global::System.String TargetRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetRoleName domain property.
		/// </summary>
		internal sealed partial class TargetRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetRoleName domain property value handler.
			/// </summary>
			public static readonly TargetRoleNamePropertyHandler Instance = new TargetRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ResourceUri domain property code
		
		/// <summary>
		/// ResourceUri domain property Id.
		/// </summary>
		public static readonly global::System.Guid ResourceUriDomainPropertyId = new global::System.Guid(0xff8e8c64, 0x1576, 0x4f98, 0xb1, 0x6c, 0x80, 0x96, 0x09, 0xf5, 0x8d, 0x87);
		
		/// <summary>
		/// Storage for ResourceUri
		/// </summary>
		private global::System.String resourceUriPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ResourceUri domain property.
		/// Description for LinqToRdf.Designer.Association.Resource Uri
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Association/ResourceUri.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Association/ResourceUri.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ff8e8c64-1576-4f98-b16c-809609f58d87")]
		public global::System.String ResourceUri
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return resourceUriPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ResourceUriPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.ResourceUri domain property.
		/// </summary>
		internal sealed partial class ResourceUriPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private ResourceUriPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.ResourceUri domain property value handler.
			/// </summary>
			public static readonly ResourceUriPropertyHandler Instance = new ResourceUriPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.ResourceUri domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ResourceUriDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.resourceUriPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.resourceUriPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Association> GetLinksToTargets ( global::LinqToRdf.Design.ModelClass sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Association>(sourceInstance, global::LinqToRdf.Design.Association.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Association> GetLinksToSources ( global::LinqToRdf.Design.ModelClass targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Association>(targetInstance, global::LinqToRdf.Design.Association.TargetDomainRoleId);
		}
		#endregion
		#region Association instance accessors
		
		/// <summary>
		/// Get any Association links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Association> GetLinks( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.Association> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.Association>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.Association> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Association>(source, global::LinqToRdf.Design.Association.SourceDomainRoleId);
			foreach ( global::LinqToRdf.Design.Association link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship UnidirectionalAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.UnidirectionalAssociation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.UnidirectionalAssociation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("86a37e85-145d-4049-a398-7111830383d2")]
	public partial class UnidirectionalAssociation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UnidirectionalAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x86a37e85, 0x145d, 0x4049, 0xa3, 0x98, 0x71, 0x11, 0x83, 0x03, 0x83, 0xd2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UnidirectionalAssociation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public UnidirectionalAssociation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UnidirectionalAssociation.UnidirectionalSourceDomainRoleId, source), new DslModeling::RoleAssignment(UnidirectionalAssociation.UnidirectionalTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnidirectionalAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnidirectionalAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnidirectionalAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnidirectionalAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UnidirectionalSource domain role code
		
		/// <summary>
		/// UnidirectionalSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnidirectionalSourceDomainRoleId = new global::System.Guid(0x850f9011, 0x5cdf, 0x428f, 0xb7, 0xb0, 0x9c, 0x70, 0xef, 0x97, 0xf4, 0x11);
		
		/// <summary>
		/// DomainRole UnidirectionalSource
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.UnidirectionalAssociation/UnidirectionalSource.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.UnidirectionalAssociation/UnidirectionalSource.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UnidirectionalTargets", PropertyDisplayNameKey="LinqToRdf.Design.UnidirectionalAssociation/UnidirectionalSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("850f9011-5cdf-428f-b7b0-9c70ef97f411")]
		public virtual ModelClass UnidirectionalSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnidirectionalSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnidirectionalSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnidirectionalSources of a ModelClass
		/// <summary>
		/// Gets a list of UnidirectionalSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetUnidirectionalSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, UnidirectionalTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing UnidirectionalSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.UnidirectionalSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.UnidirectionalSource = value;
			}
		}
		
		#endregion
		#region UnidirectionalTarget domain role code
		
		/// <summary>
		/// UnidirectionalTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnidirectionalTargetDomainRoleId = new global::System.Guid(0xf2e1719a, 0x82ef, 0x442b, 0x9c, 0x2a, 0x5c, 0x0f, 0x63, 0x0e, 0xe5, 0xb2);
		
		/// <summary>
		/// DomainRole UnidirectionalTarget
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.UnidirectionalAssociation/UnidirectionalTarget.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.UnidirectionalAssociation/UnidirectionalTarget.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UnidirectionalSources", PropertyDisplayNameKey="LinqToRdf.Design.UnidirectionalAssociation/UnidirectionalTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f2e1719a-82ef-442b-9c2a-5c0f630ee5b2")]
		public virtual ModelClass UnidirectionalTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnidirectionalTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnidirectionalTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnidirectionalTargets of a ModelClass
		/// <summary>
		/// Gets a list of UnidirectionalTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetUnidirectionalTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, UnidirectionalSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing UnidirectionalTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.UnidirectionalTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.UnidirectionalTarget = value;
			}
		}
		
		#endregion
		#region UnidirectionalSource link accessor
		/// <summary>
		/// Get the list of UnidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.UnidirectionalAssociation> GetLinksToUnidirectionalTargets ( global::LinqToRdf.Design.ModelClass unidirectionalSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.UnidirectionalAssociation>(unidirectionalSourceInstance, global::LinqToRdf.Design.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
		}
		#endregion
		#region UnidirectionalTarget link accessor
		/// <summary>
		/// Get the list of UnidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.UnidirectionalAssociation> GetLinksToUnidirectionalSources ( global::LinqToRdf.Design.ModelClass unidirectionalTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.UnidirectionalAssociation>(unidirectionalTargetInstance, global::LinqToRdf.Design.UnidirectionalAssociation.UnidirectionalTargetDomainRoleId);
		}
		#endregion
		#region UnidirectionalAssociation instance accessors
		
		/// <summary>
		/// Get any UnidirectionalAssociation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.UnidirectionalAssociation> GetLinks( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.UnidirectionalAssociation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.UnidirectionalAssociation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.UnidirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.UnidirectionalAssociation>(source, global::LinqToRdf.Design.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
			foreach ( global::LinqToRdf.Design.UnidirectionalAssociation link in links )
			{
				if ( target.Equals(link.UnidirectionalTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship ClassHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassHasAttributes.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ClassHasAttributes.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("aa86fcea-833f-4b15-9499-463bf86d490f")]
	public partial class ClassHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa86fcea, 0x833f, 0x4b15, 0x94, 0x99, 0x46, 0x3b, 0xf8, 0x6d, 0x49, 0x0f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasAttributes link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelAttribute to use as the target of the relationship.</param>
		public ClassHasAttributes(ModelClass source, ModelAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasAttributes.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x42adc844, 0xb693, 0x47dc, 0xb7, 0xe9, 0x9e, 0xae, 0x76, 0xb8, 0xb2, 0xba);
		
		/// <summary>
		/// DomainRole ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassHasAttributes/ModelClass.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ClassHasAttributes/ModelClass.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="LinqToRdf.Design.ClassHasAttributes/ModelClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("42adc844-b693-47dc-b7e9-9eae76b8b2ba")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a ModelAttribute
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(ModelAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(ModelAttribute element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newModelClass);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0xe815abe2, 0xb771, 0x47e1, 0x9e, 0xbc, 0xe8, 0xa7, 0xd1, 0xf9, 0x1f, 0xae);
		
		/// <summary>
		/// DomainRole Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassHasAttributes/Attribute.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ClassHasAttributes/Attribute.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="LinqToRdf.Design.ClassHasAttributes/Attribute.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e815abe2-b771-47e1-9ebc-e8a7d1f91fae")]
		public virtual ModelAttribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a ModelClass
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelAttribute> GetAttributes(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelAttribute>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasAttributes links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.ClassHasAttributes> GetLinksToAttributes ( global::LinqToRdf.Design.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ClassHasAttributes>(modelClassInstance, global::LinqToRdf.Design.ClassHasAttributes.ModelClassDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the ClassHasAttributes link to a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.ClassHasAttributes GetLinkToModelClass (global::LinqToRdf.Design.ModelAttribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ClassHasAttributes>(attributeInstance, global::LinqToRdf.Design.ClassHasAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasAttributes instance accessors
		
		/// <summary>
		/// Get any ClassHasAttributes links between a given ModelClass and a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.ClassHasAttributes> GetLinks( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ModelAttribute target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.ClassHasAttributes> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.ClassHasAttributes>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ClassHasAttributes>(source, global::LinqToRdf.Design.ClassHasAttributes.ModelClassDomainRoleId);
			foreach ( global::LinqToRdf.Design.ClassHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasAttributes link between a given ModelClassand a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.ClassHasAttributes GetLink( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ModelAttribute target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ClassHasAttributes>(source, global::LinqToRdf.Design.ClassHasAttributes.ModelClassDomainRoleId);
			foreach ( global::LinqToRdf.Design.ClassHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelRootHasComments.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ModelRootHasComments.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8cb3ef30-bfb8-447a-a6c5-053c5ea31e36")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8cb3ef30, 0xbfb8, 0x447a, 0xa6, 0xc5, 0x05, 0x3c, 0x5e, 0xa3, 0x1e, 0x36);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x05111d21, 0x3d54, 0x4cc8, 0xab, 0xb3, 0xf6, 0xc6, 0xb4, 0x66, 0xa3, 0xc4);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelRootHasComments/ModelRoot.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="LinqToRdf.Design.ModelRootHasComments/ModelRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("05111d21-3d54-4cc8-abb3-f6c6b466a3c4")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModelRoot);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x7923e1f3, 0xba35, 0x4598, 0x8b, 0x44, 0x30, 0x8f, 0x9e, 0xe4, 0xa8, 0x09);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelRootHasComments/Comment.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelRootHasComments/Comment.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="LinqToRdf.Design.ModelRootHasComments/Comment.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7923e1f3-ba35-4598-8b44-308f9ee4a809")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.ModelRootHasComments> GetLinksToComments ( global::LinqToRdf.Design.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ModelRootHasComments>(modelRootInstance, global::LinqToRdf.Design.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.ModelRootHasComments GetLinkToModelRoot (global::LinqToRdf.Design.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ModelRootHasComments>(commentInstance, global::LinqToRdf.Design.ModelRootHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.ModelRootHasComments> GetLinks( global::LinqToRdf.Design.ModelRoot source, global::LinqToRdf.Design.Comment target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ModelRootHasComments>(source, global::LinqToRdf.Design.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::LinqToRdf.Design.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.ModelRootHasComments GetLink( global::LinqToRdf.Design.ModelRoot source, global::LinqToRdf.Design.Comment target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ModelRootHasComments>(source, global::LinqToRdf.Design.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::LinqToRdf.Design.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship ClassHasOperations
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassHasOperations.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ClassHasOperations.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d42187ca-4e64-433c-aa2d-b09fefd29538")]
	public partial class ClassHasOperations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasOperations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd42187ca, 0x4e64, 0x433c, 0xaa, 0x2d, 0xb0, 0x9f, 0xef, 0xd2, 0x95, 0x38);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasOperations link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ClassOperation to use as the target of the relationship.</param>
		public ClassHasOperations(ModelClass source, ClassOperation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasOperations.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasOperations.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasOperations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasOperations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasOperations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasOperations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x32a94a45, 0x9286, 0x47ce, 0xbd, 0xe9, 0x2b, 0x85, 0xef, 0x7a, 0x8e, 0x6d);
		
		/// <summary>
		/// DomainRole ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassHasOperations/ModelClass.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ClassHasOperations/ModelClass.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operations", PropertyDisplayNameKey="LinqToRdf.Design.ClassHasOperations/ModelClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("32a94a45-9286-47ce-bde9-2b85ef7a8e6d")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a ClassOperation
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(ClassOperation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(ClassOperation element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newModelClass);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0x4863086c, 0x403f, 0x4cb5, 0x8a, 0x50, 0xad, 0x89, 0x0c, 0x7b, 0x65, 0x57);
		
		/// <summary>
		/// DomainRole Operation
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ClassHasOperations/Operation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ClassHasOperations/Operation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="LinqToRdf.Design.ClassHasOperations/Operation.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4863086c-403f-4cb5-8a50-ad890c7b6557")]
		public virtual ClassOperation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassOperation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a ModelClass
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClassOperation> GetOperations(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ClassOperation>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasOperations links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.ClassHasOperations> GetLinksToOperations ( global::LinqToRdf.Design.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ClassHasOperations>(modelClassInstance, global::LinqToRdf.Design.ClassHasOperations.ModelClassDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the ClassHasOperations link to a ClassOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.ClassHasOperations GetLinkToModelClass (global::LinqToRdf.Design.ClassOperation operationInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ClassHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ClassHasOperations>(operationInstance, global::LinqToRdf.Design.ClassHasOperations.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasOperations instance accessors
		
		/// <summary>
		/// Get any ClassHasOperations links between a given ModelClass and a ClassOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.ClassHasOperations> GetLinks( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ClassOperation target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.ClassHasOperations> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.ClassHasOperations>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ClassHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ClassHasOperations>(source, global::LinqToRdf.Design.ClassHasOperations.ModelClassDomainRoleId);
			foreach ( global::LinqToRdf.Design.ClassHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasOperations link between a given ModelClassand a ClassOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.ClassHasOperations GetLink( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ClassOperation target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ClassHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ClassHasOperations>(source, global::LinqToRdf.Design.ClassHasOperations.ModelClassDomainRoleId);
			foreach ( global::LinqToRdf.Design.ClassHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship Generalization
	/// Inheritance between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.Generalization.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.Generalization.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("48311b61-7dbe-414c-9754-f749f0a4b37e")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x48311b61, 0x7dbe, 0x414c, 0x97, 0x54, 0xf7, 0x49, 0xf0, 0xa4, 0xb3, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Generalization(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubclassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0x350acba5, 0x51d2, 0x42bf, 0x99, 0xe7, 0x6f, 0xe3, 0xee, 0x03, 0xaf, 0x56);
		
		/// <summary>
		/// DomainRole Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Generalization/Superclass.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Generalization/Superclass.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="LinqToRdf.Design.Generalization/Superclass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("350acba5-51d2-42bf-99e7-6fe3ee03af56")]
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Superclass of a ModelClass
		/// <summary>
		/// Gets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetSuperclass(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperclass(ModelClass element, ModelClass newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclass domain role code
		
		/// <summary>
		/// Subclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassDomainRoleId = new global::System.Guid(0x6366fe32, 0xbbc1, 0x4843, 0xae, 0xf5, 0x8a, 0xc1, 0x4b, 0x53, 0x30, 0xb7);
		
		/// <summary>
		/// DomainRole Subclass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Generalization/Subclass.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Generalization/Subclass.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Superclass", PropertyDisplayNameKey="LinqToRdf.Design.Generalization/Subclass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6366fe32-bbc1-4843-aef5-8ac14b5330b7")]
		public virtual ModelClass Subclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a ModelClass
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetSubclasses(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Discriminator domain property code
		
		/// <summary>
		/// Discriminator domain property Id.
		/// </summary>
		public static readonly global::System.Guid DiscriminatorDomainPropertyId = new global::System.Guid(0x737852c5, 0x365d, 0x4139, 0xb6, 0xec, 0x6e, 0xfc, 0xc0, 0x15, 0xce, 0xff);
		
		/// <summary>
		/// Storage for Discriminator
		/// </summary>
		private global::System.String discriminatorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Discriminator domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Generalization/Discriminator.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Generalization/Discriminator.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("737852c5-365d-4139-b6ec-6efcc015ceff")]
		public global::System.String Discriminator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return discriminatorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DiscriminatorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Generalization.Discriminator domain property.
		/// </summary>
		internal sealed partial class DiscriminatorPropertyHandler : DslModeling::DomainPropertyValueHandler<Generalization, global::System.String>
		{
			private DiscriminatorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Generalization.Discriminator domain property value handler.
			/// </summary>
			public static readonly DiscriminatorPropertyHandler Instance = new DiscriminatorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Generalization.Discriminator domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DiscriminatorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Generalization element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.discriminatorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Generalization element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.discriminatorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Generalization links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Generalization> GetLinksToSubclasses ( global::LinqToRdf.Design.ModelClass superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Generalization>(superclassInstance, global::LinqToRdf.Design.Generalization.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclass link accessor
		/// <summary>
		/// Get the Generalization link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.Generalization GetLinkToSuperclass (global::LinqToRdf.Design.ModelClass subclassInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Generalization>(subclassInstance, global::LinqToRdf.Design.Generalization.SubclassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Generalization> GetLinks( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.Generalization> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.Generalization>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Generalization>(source, global::LinqToRdf.Design.Generalization.SuperclassDomainRoleId);
			foreach ( global::LinqToRdf.Design.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given ModelClassand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.Generalization GetLink( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Generalization>(source, global::LinqToRdf.Design.Generalization.SuperclassDomainRoleId);
			foreach ( global::LinqToRdf.Design.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship BidirectionalAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.BidirectionalAssociation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.BidirectionalAssociation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("3754b9db-5a96-4db2-abd5-5daa4e2c2ce0")]
	public partial class BidirectionalAssociation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BidirectionalAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3754b9db, 0x5a96, 0x4db2, 0xab, 0xd5, 0x5d, 0xaa, 0x4e, 0x2c, 0x2c, 0xe0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BidirectionalAssociation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public BidirectionalAssociation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BidirectionalAssociation.BidirectionalSourceDomainRoleId, source), new DslModeling::RoleAssignment(BidirectionalAssociation.BidirectionalTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BidirectionalAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BidirectionalAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BidirectionalAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BidirectionalAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BidirectionalSource domain role code
		
		/// <summary>
		/// BidirectionalSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalSourceDomainRoleId = new global::System.Guid(0xd3b1dd53, 0x10c4, 0x4da1, 0x8a, 0xc4, 0x33, 0x9c, 0x8a, 0xb5, 0xc5, 0x74);
		
		/// <summary>
		/// DomainRole BidirectionalSource
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.BidirectionalAssociation/BidirectionalSource.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.BidirectionalAssociation/BidirectionalSource.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BidirectionalTargets", PropertyDisplayNameKey="LinqToRdf.Design.BidirectionalAssociation/BidirectionalSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d3b1dd53-10c4-4da1-8ac4-339c8ab5c574")]
		public virtual ModelClass BidirectionalSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BidirectionalSources of a ModelClass
		/// <summary>
		/// Gets a list of BidirectionalSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetBidirectionalSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalSource = value;
			}
		}
		
		#endregion
		#region BidirectionalTarget domain role code
		
		/// <summary>
		/// BidirectionalTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalTargetDomainRoleId = new global::System.Guid(0xee185053, 0x29b2, 0x49c1, 0x85, 0x49, 0xc6, 0xdb, 0xc8, 0xdf, 0x95, 0xbe);
		
		/// <summary>
		/// DomainRole BidirectionalTarget
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.BidirectionalAssociation/BidirectionalTarget.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.BidirectionalAssociation/BidirectionalTarget.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BidirectionalSources", PropertyDisplayNameKey="LinqToRdf.Design.BidirectionalAssociation/BidirectionalTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ee185053-29b2-49c1-8549-c6dbc8df95be")]
		public virtual ModelClass BidirectionalTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BidirectionalTargets of a ModelClass
		/// <summary>
		/// Gets a list of BidirectionalTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetBidirectionalTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalTarget = value;
			}
		}
		
		#endregion
		#region BidirectionalSource link accessor
		/// <summary>
		/// Get the list of BidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.BidirectionalAssociation> GetLinksToBidirectionalTargets ( global::LinqToRdf.Design.ModelClass bidirectionalSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.BidirectionalAssociation>(bidirectionalSourceInstance, global::LinqToRdf.Design.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region BidirectionalTarget link accessor
		/// <summary>
		/// Get the list of BidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.BidirectionalAssociation> GetLinksToBidirectionalSources ( global::LinqToRdf.Design.ModelClass bidirectionalTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.BidirectionalAssociation>(bidirectionalTargetInstance, global::LinqToRdf.Design.BidirectionalAssociation.BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region BidirectionalAssociation instance accessors
		
		/// <summary>
		/// Get any BidirectionalAssociation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.BidirectionalAssociation> GetLinks( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.BidirectionalAssociation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.BidirectionalAssociation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.BidirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.BidirectionalAssociation>(source, global::LinqToRdf.Design.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
			foreach ( global::LinqToRdf.Design.BidirectionalAssociation link in links )
			{
				if ( target.Equals(link.BidirectionalTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship InterfaceHasOperation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.InterfaceHasOperation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.InterfaceHasOperation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ab8e00c0-c9a3-4f4a-9152-0308348760c2")]
	public partial class InterfaceHasOperation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InterfaceHasOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xab8e00c0, 0xc9a3, 0x4f4a, 0x91, 0x52, 0x03, 0x08, 0x34, 0x87, 0x60, 0xc2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InterfaceHasOperation link in the same Partition as the given ModelInterface
		/// </summary>
		/// <param name="source">ModelInterface to use as the source of the relationship.</param>
		/// <param name="target">InterfaceOperation to use as the target of the relationship.</param>
		public InterfaceHasOperation(ModelInterface source, InterfaceOperation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InterfaceHasOperation.InterfaceDomainRoleId, source), new DslModeling::RoleAssignment(InterfaceHasOperation.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceHasOperation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceHasOperation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceHasOperation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceHasOperation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Interface domain role code
		
		/// <summary>
		/// Interface domain role Id.
		/// </summary>
		public static readonly global::System.Guid InterfaceDomainRoleId = new global::System.Guid(0x1fb1d4b9, 0x2c07, 0x4219, 0x9a, 0xc0, 0x49, 0x77, 0x60, 0xf1, 0x26, 0x32);
		
		/// <summary>
		/// DomainRole Interface
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.InterfaceHasOperation/Interface.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.InterfaceHasOperation/Interface.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operations", PropertyDisplayNameKey="LinqToRdf.Design.InterfaceHasOperation/Interface.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1fb1d4b9-2c07-4219-9ac0-497760f12632")]
		public virtual ModelInterface Interface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelInterface)DslModeling::DomainRoleInfo.GetRolePlayer(this, InterfaceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InterfaceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Interface of a InterfaceOperation
		/// <summary>
		/// Gets Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelInterface GetInterface(InterfaceOperation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as ModelInterface;
		}
		
		/// <summary>
		/// Sets Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInterface(InterfaceOperation element, ModelInterface newInterface)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newInterface);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0x76aaae16, 0xf701, 0x439e, 0x85, 0xd7, 0x4c, 0xad, 0x8a, 0xe5, 0x63, 0xba);
		
		/// <summary>
		/// DomainRole Operation
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.InterfaceHasOperation/Operation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.InterfaceHasOperation/Operation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Interface", PropertyDisplayNameKey="LinqToRdf.Design.InterfaceHasOperation/Operation.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("76aaae16-f701-439e-85d7-4cad8ae563ba")]
		public virtual InterfaceOperation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InterfaceOperation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a ModelInterface
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InterfaceOperation> GetOperations(ModelInterface element)
		{
			return new DslModeling::LinkedElementCollection<InterfaceOperation>(element, InterfaceDomainRoleId);
		}
		#endregion
		#region Interface link accessor
		/// <summary>
		/// Get the list of InterfaceHasOperation links to a ModelInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.InterfaceHasOperation> GetLinksToOperations ( global::LinqToRdf.Design.ModelInterface interfaceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.InterfaceHasOperation>(interfaceInstance, global::LinqToRdf.Design.InterfaceHasOperation.InterfaceDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the InterfaceHasOperation link to a InterfaceOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.InterfaceHasOperation GetLinkToInterface (global::LinqToRdf.Design.InterfaceOperation operationInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.InterfaceHasOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.InterfaceHasOperation>(operationInstance, global::LinqToRdf.Design.InterfaceHasOperation.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InterfaceHasOperation instance accessors
		
		/// <summary>
		/// Get any InterfaceHasOperation links between a given ModelInterface and a InterfaceOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.InterfaceHasOperation> GetLinks( global::LinqToRdf.Design.ModelInterface source, global::LinqToRdf.Design.InterfaceOperation target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.InterfaceHasOperation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.InterfaceHasOperation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.InterfaceHasOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.InterfaceHasOperation>(source, global::LinqToRdf.Design.InterfaceHasOperation.InterfaceDomainRoleId);
			foreach ( global::LinqToRdf.Design.InterfaceHasOperation link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InterfaceHasOperation link between a given ModelInterfaceand a InterfaceOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.InterfaceHasOperation GetLink( global::LinqToRdf.Design.ModelInterface source, global::LinqToRdf.Design.InterfaceOperation target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.InterfaceHasOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.InterfaceHasOperation>(source, global::LinqToRdf.Design.InterfaceHasOperation.InterfaceDomainRoleId);
			foreach ( global::LinqToRdf.Design.InterfaceHasOperation link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship MultipleAssociationRole
	/// Links a MultipleAssociation to one of the classes it associates.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.MultipleAssociationRole.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.MultipleAssociationRole.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b935accc-7092-46ec-a259-2dc4a630ff58")]
	public partial class MultipleAssociationRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MultipleAssociationRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb935accc, 0x7092, 0x46ec, 0xa2, 0x59, 0x2d, 0xc4, 0xa6, 0x30, 0xff, 0x58);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MultipleAssociationRole link in the same Partition as the given MultipleAssociation
		/// </summary>
		/// <param name="source">MultipleAssociation to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public MultipleAssociationRole(MultipleAssociation source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MultipleAssociationRole.MultipleAssociationDomainRoleId, source), new DslModeling::RoleAssignment(MultipleAssociationRole.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MultipleAssociationRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MultipleAssociationRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MultipleAssociationRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MultipleAssociationRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MultipleAssociation domain role code
		
		/// <summary>
		/// MultipleAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid MultipleAssociationDomainRoleId = new global::System.Guid(0xe70ee25e, 0xf609, 0x4372, 0x9a, 0x99, 0x91, 0x63, 0x4b, 0x2f, 0xa7, 0x2e);
		
		/// <summary>
		/// DomainRole MultipleAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.MultipleAssociationRole/MultipleAssociation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.MultipleAssociationRole/MultipleAssociation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="LinqToRdf.Design.MultipleAssociationRole/MultipleAssociation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e70ee25e-f609-4372-9a99-91634b2fa72e")]
		public virtual MultipleAssociation MultipleAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MultipleAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, MultipleAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MultipleAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MultipleAssociations of a ModelClass
		/// <summary>
		/// Gets a list of MultipleAssociations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MultipleAssociation> GetMultipleAssociations(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<MultipleAssociation>(element, TypeDomainRoleId);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0xc851a559, 0x819b, 0x4797, 0x9f, 0xa0, 0xb5, 0x6b, 0xf3, 0xfe, 0xff, 0x00);
		
		/// <summary>
		/// DomainRole Type
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.MultipleAssociationRole/Type.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.MultipleAssociationRole/Type.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MultipleAssociations", PropertyDisplayNameKey="LinqToRdf.Design.MultipleAssociationRole/Type.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c851a559-819b-4797-9fa0-b56bf3feff00")]
		public virtual ModelClass Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a MultipleAssociation
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetTypes(MultipleAssociation element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, MultipleAssociationDomainRoleId);
		}
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0x527ba46f, 0xf87b, 0x4e5e, 0xb7, 0x29, 0xb0, 0x2e, 0xb6, 0x16, 0xaa, 0x23);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private Multiplicity multiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.MultipleAssociationRole/Multiplicity.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.MultipleAssociationRole/Multiplicity.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("527ba46f-f87b-4e5e-b729-b02eb616aa23")]
		public Multiplicity Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MultipleAssociationRole.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<MultipleAssociationRole, Multiplicity>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MultipleAssociationRole.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MultipleAssociationRole.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(MultipleAssociationRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.multiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MultipleAssociationRole element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RoleName domain property code
		
		/// <summary>
		/// RoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RoleNameDomainPropertyId = new global::System.Guid(0x5e27dfc7, 0xc492, 0x440f, 0xa8, 0x58, 0xf0, 0x96, 0xf4, 0x57, 0x69, 0x64);
		
		/// <summary>
		/// Storage for RoleName
		/// </summary>
		private global::System.String roleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.MultipleAssociationRole/RoleName.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.MultipleAssociationRole/RoleName.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("5e27dfc7-c492-440f-a858-f096f4576964")]
		public global::System.String RoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return roleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MultipleAssociationRole.RoleName domain property.
		/// </summary>
		internal sealed partial class RoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<MultipleAssociationRole, global::System.String>
		{
			private RoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MultipleAssociationRole.RoleName domain property value handler.
			/// </summary>
			public static readonly RoleNamePropertyHandler Instance = new RoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MultipleAssociationRole.RoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MultipleAssociationRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.roleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MultipleAssociationRole element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.roleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MultipleAssociation link accessor
		/// <summary>
		/// Get the list of MultipleAssociationRole links to a MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.MultipleAssociationRole> GetLinksToTypes ( global::LinqToRdf.Design.MultipleAssociation multipleAssociationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.MultipleAssociationRole>(multipleAssociationInstance, global::LinqToRdf.Design.MultipleAssociationRole.MultipleAssociationDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the list of MultipleAssociationRole links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.MultipleAssociationRole> GetLinksToMultipleAssociations ( global::LinqToRdf.Design.ModelClass typeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.MultipleAssociationRole>(typeInstance, global::LinqToRdf.Design.MultipleAssociationRole.TypeDomainRoleId);
		}
		#endregion
		#region MultipleAssociationRole instance accessors
		
		/// <summary>
		/// Get any MultipleAssociationRole links between a given MultipleAssociation and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.MultipleAssociationRole> GetLinks( global::LinqToRdf.Design.MultipleAssociation source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.MultipleAssociationRole> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.MultipleAssociationRole>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.MultipleAssociationRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.MultipleAssociationRole>(source, global::LinqToRdf.Design.MultipleAssociationRole.MultipleAssociationDomainRoleId);
			foreach ( global::LinqToRdf.Design.MultipleAssociationRole link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MultipleAssociationRole link between a given MultipleAssociationand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.MultipleAssociationRole GetLink( global::LinqToRdf.Design.MultipleAssociation source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.MultipleAssociationRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.MultipleAssociationRole>(source, global::LinqToRdf.Design.MultipleAssociationRole.MultipleAssociationDomainRoleId);
			foreach ( global::LinqToRdf.Design.MultipleAssociationRole link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship AssociationClassRelationship
	/// Identifies a MultipleAssociation with a Class, so that it can have attributes.
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.AssociationClassRelationship.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.AssociationClassRelationship.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("343b6b49-84e5-4847-97f8-da4a7e6cb382")]
	public partial class AssociationClassRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssociationClassRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x343b6b49, 0x84e5, 0x4847, 0x97, 0xf8, 0xda, 0x4a, 0x7e, 0x6c, 0xb3, 0x82);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssociationClassRelationship link in the same Partition as the given MultipleAssociation
		/// </summary>
		/// <param name="source">MultipleAssociation to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public AssociationClassRelationship(MultipleAssociation source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssociationClassRelationship.MultipleAssociationDomainRoleId, source), new DslModeling::RoleAssignment(AssociationClassRelationship.AssociationClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationClassRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationClassRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationClassRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationClassRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MultipleAssociation domain role code
		
		/// <summary>
		/// MultipleAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid MultipleAssociationDomainRoleId = new global::System.Guid(0xac798cce, 0x28fb, 0x4779, 0x86, 0xf4, 0xb4, 0x2f, 0x83, 0x40, 0xb8, 0xcb);
		
		/// <summary>
		/// DomainRole MultipleAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.AssociationClassRelationship/MultipleAssociation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.AssociationClassRelationship/MultipleAssociation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AssociationClass", PropertyDisplayNameKey="LinqToRdf.Design.AssociationClassRelationship/MultipleAssociation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ac798cce-28fb-4779-86f4-b42f8340b8cb")]
		public virtual MultipleAssociation MultipleAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MultipleAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, MultipleAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MultipleAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MultipleAssociation of a ModelClass
		/// <summary>
		/// Gets MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MultipleAssociation GetMultipleAssociation(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationClassDomainRoleId) as MultipleAssociation;
		}
		
		/// <summary>
		/// Sets MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMultipleAssociation(ModelClass element, MultipleAssociation newMultipleAssociation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationClassDomainRoleId, newMultipleAssociation);
		}
		#endregion
		#region AssociationClass domain role code
		
		/// <summary>
		/// AssociationClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationClassDomainRoleId = new global::System.Guid(0x4caa391f, 0xda4b, 0x4310, 0x8e, 0xdf, 0x7d, 0x36, 0xa5, 0x41, 0xa7, 0x97);
		
		/// <summary>
		/// DomainRole AssociationClass
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.AssociationClassRelationship/AssociationClass.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.AssociationClassRelationship/AssociationClass.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MultipleAssociation", PropertyDisplayNameKey="LinqToRdf.Design.AssociationClassRelationship/AssociationClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4caa391f-da4b-4310-8edf-7d36a541a797")]
		public virtual ModelClass AssociationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssociationClass of a MultipleAssociation
		/// <summary>
		/// Gets AssociationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetAssociationClass(MultipleAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MultipleAssociationDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets AssociationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAssociationClass(MultipleAssociation element, ModelClass newAssociationClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MultipleAssociationDomainRoleId, newAssociationClass);
		}
		#endregion
		#region MultipleAssociation link accessor
		/// <summary>
		/// Get the AssociationClassRelationship link to a MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.AssociationClassRelationship GetLinkToAssociationClass (global::LinqToRdf.Design.MultipleAssociation multipleAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.AssociationClassRelationship>(multipleAssociationInstance, global::LinqToRdf.Design.AssociationClassRelationship.MultipleAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MultipleAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssociationClass link accessor
		/// <summary>
		/// Get the AssociationClassRelationship link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.AssociationClassRelationship GetLinkToMultipleAssociation (global::LinqToRdf.Design.ModelClass associationClassInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.AssociationClassRelationship>(associationClassInstance, global::LinqToRdf.Design.AssociationClassRelationship.AssociationClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AssociationClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssociationClassRelationship instance accessors
		
		/// <summary>
		/// Get any AssociationClassRelationship links between a given MultipleAssociation and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.AssociationClassRelationship> GetLinks( global::LinqToRdf.Design.MultipleAssociation source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.AssociationClassRelationship> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.AssociationClassRelationship>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.AssociationClassRelationship>(source, global::LinqToRdf.Design.AssociationClassRelationship.MultipleAssociationDomainRoleId);
			foreach ( global::LinqToRdf.Design.AssociationClassRelationship link in links )
			{
				if ( target.Equals(link.AssociationClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssociationClassRelationship link between a given MultipleAssociationand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.AssociationClassRelationship GetLink( global::LinqToRdf.Design.MultipleAssociation source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.AssociationClassRelationship>(source, global::LinqToRdf.Design.AssociationClassRelationship.MultipleAssociationDomainRoleId);
			foreach ( global::LinqToRdf.Design.AssociationClassRelationship link in links )
			{
				if ( target.Equals(link.AssociationClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship Aggregation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.Aggregation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.Aggregation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("eb6c7a45-dd96-4f92-84f3-8497cf2e0eac")]
	public partial class Aggregation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Aggregation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeb6c7a45, 0xdd96, 0x4f92, 0x84, 0xf3, 0x84, 0x97, 0xcf, 0x2e, 0x0e, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Aggregation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Aggregation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Aggregation.AggregationSourceDomainRoleId, source), new DslModeling::RoleAssignment(Aggregation.AggregationTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Aggregation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Aggregation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Aggregation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Aggregation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregationSource domain role code
		
		/// <summary>
		/// AggregationSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregationSourceDomainRoleId = new global::System.Guid(0x089f0911, 0xab2f, 0x4106, 0xbe, 0xe3, 0xfc, 0xde, 0xfe, 0xdf, 0xca, 0x8f);
		
		/// <summary>
		/// DomainRole AggregationSource
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Aggregation/AggregationSource.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Aggregation/AggregationSource.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregationTargets", PropertyDisplayNameKey="LinqToRdf.Design.Aggregation/AggregationSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("089f0911-ab2f-4106-bee3-fcdefedfca8f")]
		public virtual ModelClass AggregationSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregationSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregationSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationSources of a ModelClass
		/// <summary>
		/// Gets a list of AggregationSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetAggregationSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, AggregationTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing AggregationSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AggregationSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AggregationSource = value;
			}
		}
		
		#endregion
		#region AggregationTarget domain role code
		
		/// <summary>
		/// AggregationTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregationTargetDomainRoleId = new global::System.Guid(0xa82a7c8b, 0xf718, 0x41f3, 0xa6, 0xda, 0x90, 0x5e, 0xad, 0x2b, 0x79, 0x05);
		
		/// <summary>
		/// DomainRole AggregationTarget
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Aggregation/AggregationTarget.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Aggregation/AggregationTarget.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregationSources", PropertyDisplayNameKey="LinqToRdf.Design.Aggregation/AggregationTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a82a7c8b-f718-41f3-a6da-905ead2b7905")]
		public virtual ModelClass AggregationTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregationTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregationTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationTargets of a ModelClass
		/// <summary>
		/// Gets a list of AggregationTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetAggregationTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, AggregationSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing AggregationTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AggregationTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AggregationTarget = value;
			}
		}
		
		#endregion
		#region AggregationSource link accessor
		/// <summary>
		/// Get the list of Aggregation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Aggregation> GetLinksToAggregationTargets ( global::LinqToRdf.Design.ModelClass aggregationSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Aggregation>(aggregationSourceInstance, global::LinqToRdf.Design.Aggregation.AggregationSourceDomainRoleId);
		}
		#endregion
		#region AggregationTarget link accessor
		/// <summary>
		/// Get the list of Aggregation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Aggregation> GetLinksToAggregationSources ( global::LinqToRdf.Design.ModelClass aggregationTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Aggregation>(aggregationTargetInstance, global::LinqToRdf.Design.Aggregation.AggregationTargetDomainRoleId);
		}
		#endregion
		#region Aggregation instance accessors
		
		/// <summary>
		/// Get any Aggregation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Aggregation> GetLinks( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.Aggregation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.Aggregation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.Aggregation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Aggregation>(source, global::LinqToRdf.Design.Aggregation.AggregationSourceDomainRoleId);
			foreach ( global::LinqToRdf.Design.Aggregation link in links )
			{
				if ( target.Equals(link.AggregationTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship Composition
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.Composition.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.Composition.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("278180a6-fd59-4fd7-80ff-78dfee22ea3b")]
	public partial class Composition : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Composition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x278180a6, 0xfd59, 0x4fd7, 0x80, 0xff, 0x78, 0xdf, 0xee, 0x22, 0xea, 0x3b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Composition link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Composition(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Composition.CompositionSourceDomainRoleId, source), new DslModeling::RoleAssignment(Composition.CompositionTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Composition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Composition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Composition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Composition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CompositionSource domain role code
		
		/// <summary>
		/// CompositionSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositionSourceDomainRoleId = new global::System.Guid(0xfb033037, 0x784e, 0x402f, 0x98, 0x6d, 0x1d, 0x2f, 0x6b, 0x90, 0x9c, 0xd3);
		
		/// <summary>
		/// DomainRole CompositionSource
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Composition/CompositionSource.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Composition/CompositionSource.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompositionTargets", PropertyDisplayNameKey="LinqToRdf.Design.Composition/CompositionSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fb033037-784e-402f-986d-1d2f6b909cd3")]
		public virtual ModelClass CompositionSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositionSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositionSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompositionSources of a ModelClass
		/// <summary>
		/// Gets a list of CompositionSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetCompositionSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, CompositionTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing CompositionSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompositionSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompositionSource = value;
			}
		}
		
		#endregion
		#region CompositionTarget domain role code
		
		/// <summary>
		/// CompositionTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositionTargetDomainRoleId = new global::System.Guid(0x8a7a2ed3, 0xf07b, 0x40e6, 0xb9, 0xb9, 0xc1, 0x1c, 0xae, 0x69, 0x61, 0x7d);
		
		/// <summary>
		/// DomainRole CompositionTarget
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Composition/CompositionTarget.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Composition/CompositionTarget.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CompositionSources", PropertyDisplayNameKey="LinqToRdf.Design.Composition/CompositionTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8a7a2ed3-f07b-40e6-b9b9-c11cae69617d")]
		public virtual ModelClass CompositionTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositionTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositionTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompositionTargets of a ModelClass
		/// <summary>
		/// Gets a list of CompositionTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetCompositionTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, CompositionSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing CompositionTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompositionTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompositionTarget = value;
			}
		}
		
		#endregion
		#region CompositionSource link accessor
		/// <summary>
		/// Get the list of Composition links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Composition> GetLinksToCompositionTargets ( global::LinqToRdf.Design.ModelClass compositionSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Composition>(compositionSourceInstance, global::LinqToRdf.Design.Composition.CompositionSourceDomainRoleId);
		}
		#endregion
		#region CompositionTarget link accessor
		/// <summary>
		/// Get the list of Composition links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Composition> GetLinksToCompositionSources ( global::LinqToRdf.Design.ModelClass compositionTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Composition>(compositionTargetInstance, global::LinqToRdf.Design.Composition.CompositionTargetDomainRoleId);
		}
		#endregion
		#region Composition instance accessors
		
		/// <summary>
		/// Get any Composition links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Composition> GetLinks( global::LinqToRdf.Design.ModelClass source, global::LinqToRdf.Design.ModelClass target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.Composition> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.Composition>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.Composition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Composition>(source, global::LinqToRdf.Design.Composition.CompositionSourceDomainRoleId);
			foreach ( global::LinqToRdf.Design.Composition link in links )
			{
				if ( target.Equals(link.CompositionTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship ModelRootHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelRootHasTypes.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.ModelRootHasTypes.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("da48df8b-4207-458e-952c-02e0cf7f9197")]
	public partial class ModelRootHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda48df8b, 0x4207, 0x458e, 0x95, 0x2c, 0x02, 0xe0, 0xcf, 0x7f, 0x91, 0x97);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasTypes link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelRootHasTypes(ModelRoot source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasTypes.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasTypes.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xbe6e9142, 0xcb28, 0x4f87, 0xa9, 0x85, 0xc8, 0x40, 0xbe, 0x30, 0x7c, 0x6d);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelRootHasTypes/ModelRoot.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelRootHasTypes/ModelRoot.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="LinqToRdf.Design.ModelRootHasTypes/ModelRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("be6e9142-cb28-4f87-a985-c840be307c6d")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelType
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypeDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelType element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypeDomainRoleId, newModelRoot);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0x63a3ff91, 0xfc6c, 0x4696, 0xa8, 0x51, 0x05, 0xae, 0x85, 0xd7, 0x9a, 0xc8);
		
		/// <summary>
		/// DomainRole Type
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.ModelRootHasTypes/Type.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.ModelRootHasTypes/Type.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("63a3ff91-fc6c-4696-a851-05ae85d79ac8")]
		public virtual ModelType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ModelRoot
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ModelRoot element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasTypes links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.ModelRootHasTypes> GetLinksToTypes ( global::LinqToRdf.Design.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ModelRootHasTypes>(modelRootInstance, global::LinqToRdf.Design.ModelRootHasTypes.ModelRootDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the ModelRootHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.ModelRootHasTypes GetLinkToModelRoot (global::LinqToRdf.Design.ModelType typeInstance)
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ModelRootHasTypes>(typeInstance, global::LinqToRdf.Design.ModelRootHasTypes.TypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Type not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasTypes instance accessors
		
		/// <summary>
		/// Get any ModelRootHasTypes links between a given ModelRoot and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.ModelRootHasTypes> GetLinks( global::LinqToRdf.Design.ModelRoot source, global::LinqToRdf.Design.ModelType target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.ModelRootHasTypes> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.ModelRootHasTypes>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ModelRootHasTypes>(source, global::LinqToRdf.Design.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::LinqToRdf.Design.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasTypes link between a given ModelRootand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.ModelRootHasTypes GetLink( global::LinqToRdf.Design.ModelRoot source, global::LinqToRdf.Design.ModelType target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.ModelRootHasTypes>(source, global::LinqToRdf.Design.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::LinqToRdf.Design.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.CommentReferencesSubjects.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.CommentReferencesSubjects.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("236dd872-7bb4-4377-9893-0ade3ae81cc5")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x236dd872, 0x7bb4, 0x4377, 0x98, 0x93, 0x0a, 0xde, 0x3a, 0xe8, 0x1c, 0xc5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xdd4321f8, 0xa9a8, 0x4b46, 0xb6, 0x4d, 0xc6, 0xd8, 0x3d, 0x7e, 0x1f, 0xba);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.CommentReferencesSubjects/Comment.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.CommentReferencesSubjects/Comment.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="LinqToRdf.Design.CommentReferencesSubjects/Comment.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd4321f8-a9a8-4b46-b64d-c6d83d7e1fba")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelType
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelType element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xa09e65b3, 0x0a6f, 0x44d5, 0x90, 0xaf, 0x3c, 0xcb, 0xcf, 0xc6, 0x8d, 0xa4);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.CommentReferencesSubjects/Subject.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.CommentReferencesSubjects/Subject.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="LinqToRdf.Design.CommentReferencesSubjects/Subject.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a09e65b3-0a6f-44d5-90af-3ccbcfc68da4")]
		public virtual ModelType Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetSubjects(Comment element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.CommentReferencesSubjects> GetLinksToSubjects ( global::LinqToRdf.Design.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.CommentReferencesSubjects>(commentInstance, global::LinqToRdf.Design.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.CommentReferencesSubjects> GetLinksToComments ( global::LinqToRdf.Design.ModelType subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.CommentReferencesSubjects>(subjectInstance, global::LinqToRdf.Design.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.CommentReferencesSubjects> GetLinks( global::LinqToRdf.Design.Comment source, global::LinqToRdf.Design.ModelType target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.CommentReferencesSubjects>(source, global::LinqToRdf.Design.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::LinqToRdf.Design.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.CommentReferencesSubjects GetLink( global::LinqToRdf.Design.Comment source, global::LinqToRdf.Design.ModelType target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.CommentReferencesSubjects>(source, global::LinqToRdf.Design.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::LinqToRdf.Design.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace LinqToRdf.Design
{
	/// <summary>
	/// DomainRelationship Implementation
	/// </summary>
	[DslDesign::DisplayNameResource("LinqToRdf.Design.Implementation.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("LinqToRdf.Design.Implementation.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8a5ee714-bc65-49c6-9002-b81339385d91")]
	public partial class Implementation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Implementation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8a5ee714, 0xbc65, 0x49c6, 0x90, 0x02, 0xb8, 0x13, 0x39, 0x38, 0x5d, 0x91);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Implementation link in the same Partition as the given ModelInterface
		/// </summary>
		/// <param name="source">ModelInterface to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public Implementation(ModelInterface source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Implementation.ImplementDomainRoleId, source), new DslModeling::RoleAssignment(Implementation.ImplementorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Implementation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Implementation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Implementation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Implementation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Implement domain role code
		
		/// <summary>
		/// Implement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplementDomainRoleId = new global::System.Guid(0xb770d3b2, 0x5616, 0x4f3e, 0x88, 0x2c, 0xfd, 0xb9, 0xc6, 0x26, 0xfb, 0x12);
		
		/// <summary>
		/// DomainRole Implement
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Implementation/Implement.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Implementation/Implement.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Implementors", PropertyDisplayNameKey="LinqToRdf.Design.Implementation/Implement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b770d3b2-5616-4f3e-882c-fdb9c626fb12")]
		public virtual ModelInterface Implement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelInterface)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Implements of a ModelType
		/// <summary>
		/// Gets a list of Implements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelInterface> GetImplements(ModelType element)
		{
			return new DslModeling::LinkedElementCollection<ModelInterface>(element, ImplementorDomainRoleId);
		}
		#endregion
		#region Implementor domain role code
		
		/// <summary>
		/// Implementor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplementorDomainRoleId = new global::System.Guid(0x07fa0771, 0x6a13, 0x46ae, 0x8c, 0xfe, 0x83, 0x8d, 0xd7, 0xe3, 0x00, 0x1b);
		
		/// <summary>
		/// DomainRole Implementor
		/// </summary>
		[DslDesign::DisplayNameResource("LinqToRdf.Design.Implementation/Implementor.DisplayName", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("LinqToRdf.Design.Implementation/Implementor.Description", typeof(global::LinqToRdf.Design.LinqToRdfDomainModel), "LinqToRdf.Design.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Implements", PropertyDisplayNameKey="LinqToRdf.Design.Implementation/Implementor.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("07fa0771-6a13-46ae-8cfe-838dd7e3001b")]
		public virtual ModelType Implementor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplementorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplementorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Implementors of a ModelInterface
		/// <summary>
		/// Gets a list of Implementors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetImplementors(ModelInterface element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, ImplementDomainRoleId);
		}
		#endregion
		#region Implement link accessor
		/// <summary>
		/// Get the list of Implementation links to a ModelInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Implementation> GetLinksToImplementors ( global::LinqToRdf.Design.ModelInterface implementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Implementation>(implementInstance, global::LinqToRdf.Design.Implementation.ImplementDomainRoleId);
		}
		#endregion
		#region Implementor link accessor
		/// <summary>
		/// Get the list of Implementation links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Implementation> GetLinksToImplements ( global::LinqToRdf.Design.ModelType implementorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Implementation>(implementorInstance, global::LinqToRdf.Design.Implementation.ImplementorDomainRoleId);
		}
		#endregion
		#region Implementation instance accessors
		
		/// <summary>
		/// Get any Implementation links between a given ModelInterface and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::LinqToRdf.Design.Implementation> GetLinks( global::LinqToRdf.Design.ModelInterface source, global::LinqToRdf.Design.ModelType target )
		{
			global::System.Collections.Generic.List<global::LinqToRdf.Design.Implementation> outLinks = new global::System.Collections.Generic.List<global::LinqToRdf.Design.Implementation>();
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.Implementation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Implementation>(source, global::LinqToRdf.Design.Implementation.ImplementDomainRoleId);
			foreach ( global::LinqToRdf.Design.Implementation link in links )
			{
				if ( target.Equals(link.Implementor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Implementation link between a given ModelInterfaceand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::LinqToRdf.Design.Implementation GetLink( global::LinqToRdf.Design.ModelInterface source, global::LinqToRdf.Design.ModelType target )
		{
			global::System.Collections.Generic.IList<global::LinqToRdf.Design.Implementation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::LinqToRdf.Design.Implementation>(source, global::LinqToRdf.Design.Implementation.ImplementDomainRoleId);
			foreach ( global::LinqToRdf.Design.Implementation link in links )
			{
				if ( target.Equals(link.Implementor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
