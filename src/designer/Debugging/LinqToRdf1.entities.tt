<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" debug="true"#>
<#@ assembly name = "System.Core.dll" #>
<#@ assembly name = "linqtordf.dll" #>
<#@ import namespace = "System.Collections.Generic" #>
<#@ import namespace = "LinqToRdf" #>
<#@ output extension=".cs" #>
<#@ LinqToRdf processor="LinqToRdfDirectiveProcessor" requires="fileName='LinqToRdf1.rdfx'"  #>
<#
// prolog - set up some book-keeping variables
string baseUri = this.ModelRoot.OntologyUri;
string modelName = this.ModelRoot.Name;
HashSet<ModelClass> processedClasses = new HashSet<ModelClass>();
ITypeTranslator2 tt = TypeTranslationProvider.GetTypeTranslator(SupportedTypeDomain.DotNet);

#>
using System;
using System.Data.Linq;
using System.Linq;
using LinqToRdf;

[assembly: Ontology(
    BaseUri = "<#=baseUri#>",
    Name = "<#=modelName#>",
    Prefix = "<#=modelName#>",
    UrlOfOntology = "<#=baseUri#>")]

namespace <#=modelName#>
{

    public partial class <#=modelName#>DataContext : RdfDataContext
    {
        public <#=modelName#>DataContext(string store) : base(new TripleStore(store))
        {}
<#
  foreach (ModelType type in this.ModelRoot.Types)
  {
	ModelClass modelClass = type as ModelClass;
	if (modelClass != null && !processedClasses.Contains(modelClass))
	{
#>
        public IQueryable<<#= modelClass.Name #>> <#= modelClass.Name #>s
        {
            get { return ForType<<#= modelClass.Name #>>(); }
        }
<#
    }
   }
#>
  }

<#
  foreach (ModelType type in this.ModelRoot.Types)
  {
	ModelClass modelClass = type as ModelClass;
	if (modelClass != null && !processedClasses.Contains(modelClass))
	{
#>

[OwlResource(OntologyName="<#=modelName#>", RelativeUriReference="<#=modelClass.ResourceUri#>")]
public partial class <#= modelClass.Name #> : <#
			WriteLine(modelClass.Superclass == null?"OwlInstanceSupertype":modelClass.Superclass.Name);
 #>
{
<#
		foreach(ModelAttribute attr in modelClass.Attributes)
		{
		
				PrimitiveDataType dt = PrimitiveDataType.UNKNOWN;
				bool isPrimitive = tt.IsPrimitiveType(attr.Type);
				string typename = "";
				if(isPrimitive)
				{
					dt = (PrimitiveDataType)Enum.Parse(typeof(PrimitiveDataType), attr.Type.ToUpper());
					typename = tt[dt];
				}
				else
				{
					typename = attr.Type;
				}
		
#>
[OwlResource(OntologyName="<#=modelName#>", RelativeUriReference="<#=attr.ResourceUri#>")]
<# if(attr.Multiplicity.ToString() == "1")
{
#>
		public <#=typename #> <#=attr.Name#>{get;set;}
<#
}
else
{
#>
		public EntitySet<<#=typename #>> <#=attr.Name#>{get;set;}
<#
}
		}
		
		foreach(Aggregation association in Aggregation.GetLinksToAggregationSources(modelClass))
		{
		string aggSrcTypeName = association.Source.Name;
		#>
        private readonly EntityRef<<#= aggSrcTypeName #>> _<#= aggSrcTypeName #> { get; set; }
        [OwlResource(OntologyName = "<#= modelName #>", RelativeUriReference = "<#=association.ResourceUri#>")]
        public <#= aggSrcTypeName #> <#= aggSrcTypeName #>
        {
          get
          {
            if (_<#= aggSrcTypeName #>.HasLoadedOrAssignedValues)
              return _<#= aggSrcTypeName #>;
            if (DataContext != null)
            {
              string parentUri = InstanceUri;
              string childPredicateUri = this.PredicateUriForProperty(MethodBase.GetCurrentMethod());
              _<#= aggSrcTypeName #>.SetSource(
                from t in ((<#=modelName#>DataContext) DataContext).<#= aggSrcTypeName #>s
                where t.StmtSubjectWithObjectAndPredicate(parentUri, childPredicateUri)
                select t);
            }
            return _<#= aggSrcTypeName #>;
          }
        }
		
		<#
		}
		
		foreach(Aggregation association in Aggregation.GetLinksToAggregationTargets(modelClass))
		{
		string srcTypeName = association.Source.Name;
		string typeName = association.Target.Name;
		string privateVarName = "_" + typeName + "s";
		string publicVarName = typeName + "s";
#>		
        private EntitySet<<#= typeName #>> <#= privateVarName #> = new EntitySet<<#= typeName #>>();
        [OwlResource(OntologyName = "<#=modelName#>", RelativeUriReference = "<#=association.ResourceUri#>")]
        public EntitySet<<#= typeName #>> <#= publicVarName #>
        {
          get
          {
            if (<#= privateVarName #>.HasLoadedOrAssignedValues)
              return <#= privateVarName #>;
            if (DataContext != null)
            {
              string parentUri = InstanceUri;
              string childPredicateUri = this.PredicateUriForProperty(MethodBase.GetCurrentMethod());
              <#= privateVarName #>.SetSource(
                from t in ((<#=modelName#>DataContext) DataContext).<#= typeName #>s
                where t.StmtSubjectWithObjectAndPredicate(parentUri, childPredicateUri)
                select t);
            }
            return <#= privateVarName #>;
          }
        }
<#
		}
		
		foreach(Composition comp in Composition.GetLinksToCompositionTargets(modelClass))
		{
				WriteLine(":"+comp.ResourceUri);
				WriteLine("\trdfs:domain :" + modelClass.Name +";");
				WriteLine("\trdfs:range :" + comp.Target.Name +".");
		}

#>
}
<#
	}
  }
#>
}