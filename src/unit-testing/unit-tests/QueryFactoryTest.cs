// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System;
using LinqToRdf;
using LinqToRdf.Sparql;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using RdfMusic;
using SemWeb;
using RdfSerialisationTest.Properties; 

namespace RdfSerialisationTest
{
	/// <summary>
	///This is a test class for LinqToRdf.QueryFactory&lt;T&gt; and is intended
	///to contain all LinqToRdf.QueryFactory&lt;T&gt; Unit Tests
	///</summary>
	[TestClass]
	public class QueryFactoryTest
	{
		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get { return testContextInstance; }
			set { testContextInstance = value; }
		}

		#region Additional test attributes

		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//

		#endregion

		#region helpers

		private static Store CreateMemoryStore()
		{
			Store result = new MemoryStore();
			string serialisedLocation = Settings.Default.testStoreLocation;
			result.Import(new N3Reader(serialisedLocation));
			return result;
		}

		private static TripleStore CreateInMemoryTripleStore()
		{
			Store store = CreateMemoryStore();
			TripleStore ts = new TripleStore();
			ts.LocalTripleStore = store;
			ts.QueryType = QueryType.LocalN3StoreInMemory;
			return ts;
		}

		private static TripleStore CreatePersistentTripleStore()
		{
			TripleStore ts = new TripleStore();
			ts.EndpointUri = @"some dummy connection string";
			ts.QueryType = QueryType.LocalN3StorePersistent;
			return ts;
		}

		private static TripleStore CreateInMemorySparqlTripleStore()
		{
			Store store = CreateMemoryStore();
			TripleStore ts = new TripleStore();
			ts.LocalTripleStore = store;
			ts.QueryType = QueryType.LocalSparqlStore;
			return ts;
		}

		private static TripleStore CreateOnlineSparqlTripleStore()
		{
			TripleStore ts = new TripleStore();
            ts.EndpointUri = @"http://localhost/linqtordf/SparqlQuery.asp";
			ts.QueryType = QueryType.RemoteSparqlStore;
			return ts;
		}

		#endregion

		#region CreateConnection

		/// <summary>
		///A test for CreateConnection (IRdfQuery&lt;T&gt;)
		///</summary>
		[TestMethod]
		public void CreateConnectionTest_InMemorySparqlTripleStore()
		{
			TestConnectionCreationForTripleStore(CreateInMemorySparqlTripleStore());
		}

		/// <summary>
		///A test for CreateConnection (IRdfQuery&lt;T&gt;)
		///</summary>
		[TestMethod]
		public void CreateConnectionTest_OnlineSparqlTripleStore()
		{
			TestConnectionCreationForTripleStore(CreateOnlineSparqlTripleStore());
		}

		/// <summary>
		///A test for CreateConnection (IRdfQuery&lt;T&gt;)
		///</summary>
		[TestMethod]
		[ExpectedException(typeof(ApplicationException), "Only sparql queries currently support the ADO.NET style APIs")]
		public void CreateConnectionTest_InMemoryTripleStore()
		{
			TestConnectionCreationForTripleStore(CreateInMemoryTripleStore());
		}

		/// <summary>
		///A test for CreateConnection (IRdfQuery&lt;T&gt;)
		///</summary>
		[TestMethod]
		[ExpectedException(typeof(ApplicationException), "Only sparql queries currently support the ADO.NET style APIs")]
		public void CreateConnectionTest_PersistentTripleStore()
		{
			TestConnectionCreationForTripleStore(CreatePersistentTripleStore());
		}

		private static void TestConnectionCreationForTripleStore(TripleStore ts1)
		{
			IRdfContext context = new RDF(ts1);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts1.QueryType, context);
			IRdfQuery<Track> qry1 = context.ForType<Track>();
			IRdfConnection<Track> rdfConnection = factory.CreateConnection(qry1);
			Assert.IsNotNull(rdfConnection);
		}

		#endregion

		#region CreateExpressionTranslator

		/// <summary>
		///A test for CreateExpressionTranslator ()
		///</summary>
		[TestMethod]
		public void CreateExpressionTranslatorTest()
		{
			TripleStore ts = CreateOnlineSparqlTripleStore();
			IRdfContext context = new RDF(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryType, context);
			Assert.AreEqual(factory.QueryType, ts.QueryType);
			IQueryFormatTranslator translator = factory.CreateExpressionTranslator();
			Assert.IsNotNull(translator);
			Assert.IsInstanceOfType(translator, typeof(LinqToSparqlExpTranslator<Track>));
		}

		/// <summary>
		///A test for CreateExpressionTranslator ()
		///</summary>
		[TestMethod]
		public void CreateExpressionTranslatorTest2()
		{
			TripleStore ts = CreateInMemoryTripleStore();
			IRdfContext context = new RDF(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryType, context);
			Assert.AreEqual(factory.QueryType, ts.QueryType);
			IQueryFormatTranslator translator = factory.CreateExpressionTranslator();
			Assert.IsNotNull(translator);
			Assert.IsInstanceOfType(translator, typeof(LinqToN3ExpTranslator<Track>));
		}

		#endregion

		#region CreateQuery

		/// <summary>
		///A test for CreateQuery&lt;&gt; ()
		///</summary>
		[TestMethod]
		public void CreateQueryTest_OnlineSparqlTripleStore()
		{
			TripleStore ts = CreateOnlineSparqlTripleStore();
			IRdfContext context = new RDF(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryType, context);
			Assert.AreEqual(factory.QueryType, ts.QueryType);
			IRdfQuery<Track> query = factory.CreateQuery<Track>();
			Assert.IsNotNull(query);
			Assert.IsInstanceOfType(query, typeof(SparqlQuery<Track>));
		}

		/// <summary>
		///A test for CreateQuery&lt;&gt; ()
		///</summary>
		[TestMethod]
		public void CreateQueryTest_InMemorySparqlTripleStore()
		{
			TripleStore ts = CreateInMemorySparqlTripleStore();
			IRdfContext context = new RDF(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryType, context);
			Assert.AreEqual(factory.QueryType, ts.QueryType);
			IRdfQuery<Track> query = factory.CreateQuery<Track>();
			Assert.IsNotNull(query);
			Assert.IsInstanceOfType(query, typeof(SparqlQuery<Track>));
		}

		/// <summary>
		///A test for CreateQuery&lt;&gt; ()
		///</summary>
		[TestMethod]
		public void CreateQueryTest_InMemoryTripleStore()
		{
			TripleStore ts = CreateInMemoryTripleStore();
			IRdfContext context = new RDF(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryType, context);
			Assert.AreEqual(factory.QueryType, ts.QueryType);
			IRdfQuery<Track> query = factory.CreateQuery<Track>();
			Assert.IsNotNull(query);
			Assert.IsInstanceOfType(query, typeof(RdfN3Query<Track>));
		}

		/// <summary>
		///A test for CreateQuery&lt;&gt; ()
		///</summary>
		[TestMethod]
		public void CreateQueryTest_PersistentTripleStore()
		{
			TripleStore ts = CreatePersistentTripleStore();
			IRdfContext context = new RDF(ts);
			QueryFactory<Track> factory = new QueryFactory<Track>(ts.QueryType, context);
			Assert.AreEqual(factory.QueryType, ts.QueryType);
			IRdfQuery<Track> query = factory.CreateQuery<Track>();
			Assert.IsNotNull(query);
			Assert.IsInstanceOfType(query, typeof(RdfN3Query<Track>));
		}

		#endregion
		/// <summary>
		///A test for QueryFactory (QueryType, IRdfContext)
		///</summary>
		[TestMethod, Ignore]
		public void ConstructorTest()
		{
			// QueryType queryType = QueryType.LocalN3StoreInMemory; // TODO: Initialize to an appropriate value
			// 
			// IRdfContext context = null; // TODO: Initialize to an appropriate value
			// 
			// QueryFactory<T> target = new QueryFactory<T>(queryType, context);
			// 
			// // TODO: Implement code to verify target
			// Assert.Inconclusive("TODO: Implement code to verify target");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for QueryType
		///</summary>
        [TestMethod, Ignore]
		public void QueryTypeTest()
		{
			// QueryType queryType = QueryType.LocalN3StoreInMemory; // TODO: Initialize to an appropriate value
			// 
			// IRdfContext context = null; // TODO: Initialize to an appropriate value
			// 
			// QueryFactory<T> target = new QueryFactory<T>(queryType, context);
			// 
			// QueryType val = QueryType.LocalN3StoreInMemory; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.QueryType, "LinqToRdf.QueryFactory<T>.QueryType was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}

		/// <summary>
		///A test for TypeTranslator
		///</summary>
        [TestMethod, Ignore]
		public void TypeTranslatorTest()
		{
			// QueryType queryType = QueryType.LocalN3StoreInMemory; // TODO: Initialize to an appropriate value
			// 
			// IRdfContext context = null; // TODO: Initialize to an appropriate value
			// 
			// QueryFactory<T> target = new QueryFactory<T>(queryType, context);
			// 
			// ITypeTranslator val = null; // TODO: Assign to an appropriate value for the property
			// 
			// 
			// Assert.AreEqual(val, target.TypeTranslator, "LinqToRdf.QueryFactory<T>.TypeTranslator was not set correctly.");
			// Assert.Inconclusive("Verify the correctness of this test method.");
			Assert.Inconclusive("Generics testing must be manually provided.");
		}
	}
}
