// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using System;
using System.Collections.Generic;
using System.Text;
using LinqToRdf;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTests
{
	[TestClass]
	public class XsdtTypeConverterTest
	{
		[TestMethod]
		public void ConstructorTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

			Assert.IsNotNull(target);
			Assert.IsNotNull(target.TypeLookup);
		}

		[TestMethod]
		public void GetDataTypeTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

			Type t = typeof (string); // TODO: Initialize to an appropriate value

			XsdtPrimitiveDataType expected = XsdtPrimitiveDataType.XsdtString;
			XsdtPrimitiveDataType actual;

			actual = target.GetDataType(t);

			Assert.AreEqual(expected, actual, "LinqToRdf.XsdtTypeConverter.GetDataType did not return the expected value.");
		}

		[TestMethod]
		public void GetXsdtAttrForTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

			LinqToRdf_XsdtTypeConverterAccessor accessor = new LinqToRdf_XsdtTypeConverterAccessor(target);

			XsdtPrimitiveDataType dt = XsdtPrimitiveDataType.XsdtString; // TODO: Initialize to an appropriate value

			XsdtAttribute expected = new XsdtAttribute(true, "string");
			XsdtAttribute actual;

			actual = accessor.GetXsdtAttrFor(dt);

			Assert.AreEqual(expected, actual, "LinqToRdf.XsdtTypeConverter.GetXsdtAttrFor did not return the expected value.");
		}

		[TestMethod]
		public void GetXsdtDateRepresentationForTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

			LinqToRdf_XsdtTypeConverterAccessor accessor = new LinqToRdf_XsdtTypeConverterAccessor(target);

			DateTime d = new DateTime(2007, 10, 17, 19, 42, 01); // TODO: Initialize to an appropriate value
            
			XsdtPrimitiveDataType dt = XsdtPrimitiveDataType.XsdtDateTime; // TODO: Initialize to an appropriate value

			XsdtAttribute attr = new XsdtAttribute(true, "dateTime"); // TODO: Initialize to an appropriate value

			string expected = "2007-10-17T19:42:01+" + ((d.IsDaylightSavingTime())?"11:00":"10:00");
			string actual;

			actual = accessor.GetXsdtDateRepresentationFor(d, dt, attr);

			Assert.AreEqual(expected, actual,
			                "LinqToRdf.XsdtTypeConverter.GetXsdtDateRepresentationFor did not return the expec" +
			                "ted value.");
		}

		[TestMethod]
		public void TestXsdtTypeConversions()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();
			Assert.IsTrue(target.Get("hello world").ToString() == "\"hello world\"");
			Assert.IsTrue(target.Get('a').ToString() == "\"a\"");
			Assert.IsTrue(target.Get(true).ToString() == "True^^xsdt:boolean");
			Assert.IsTrue(target.Get(false).ToString() == "False^^xsdt:boolean");
			Assert.IsTrue(target.Get((float) 3.14).ToString() == "3.14^^xsdt:float");
			Assert.IsTrue(target.Get(3.14).ToString() == "3.14^^xsdt:double");
			Assert.IsTrue(target.Get(3.14M).ToString() == "3.14^^xsdt:decimal");
			Assert.IsTrue(target.Get(new TimeSpan(0, 5, 0)).ToString() == "\"00:05:00\"^^xsdt:duration");
			Assert.IsTrue(target.Get<Int16>(4).ToString() == "4^^xsdt:short");
			Assert.IsTrue(target.Get(4).ToString() == "4");
			Assert.IsTrue(target.Get<Int64>(4).ToString() == "4^^xsdt:long");
			Assert.IsTrue(target.Get<Byte[]>(ASCIIEncoding.ASCII.GetBytes("hello")).ToString() == "\"hello\"^^xsdt:hexBinary");
		}

		[TestMethod]
		public void TypeLookupTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

			Dictionary<XsdtPrimitiveDataType, Type> val = new Dictionary<XsdtPrimitiveDataType, Type>();
				// TODO: Assign to an appropriate value for the property

			target.TypeLookup = val;


			Assert.AreEqual(val, target.TypeLookup, "LinqToRdf.XsdtTypeConverter.TypeLookup was not set correctly.");
		}
	}
}