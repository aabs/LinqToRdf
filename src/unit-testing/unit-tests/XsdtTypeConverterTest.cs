// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using LinqToRdf;
namespace RdfSerialisationTest
{
	[TestClass()]
	public class XsdtTypeConverterTest
	{


		private TestContext testContextInstance;

		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		[TestMethod()]
		public void TestXsdtTypeConversions()
		{

			XsdtTypeConverter target = new XsdtTypeConverter();
			Assert.IsTrue(target.Get("hello world").ToString() == "\"hello world\"");
			Assert.IsTrue(target.Get('a').ToString() == "\"a\"");
			Assert.IsTrue(target.Get(true).ToString() == "True^^xsdt:boolean");
			Assert.IsTrue(target.Get(false).ToString() == "False^^xsdt:boolean");
			Assert.IsTrue(target.Get((float)3.14).ToString() == "3.14^^xsdt:float");
			Assert.IsTrue(target.Get(3.14).ToString() == "3.14^^xsdt:double");
			Assert.IsTrue(target.Get(3.14M).ToString() == "3.14^^xsdt:decimal");
			Assert.IsTrue(target.Get(new TimeSpan(0,5,0)).ToString() == "\"00:05:00\"^^xsdt:duration");
			Assert.IsTrue(target.Get<Int16>(4).ToString() == "4^^xsdt:short");
			Assert.IsTrue(target.Get(4).ToString() == "4");
			Assert.IsTrue(target.Get<Int64>(4).ToString() == "4^^xsdt:long");
			Assert.IsTrue(target.Get<Byte[]>(ASCIIEncoding.ASCII.GetBytes("hello")).ToString() == "\"hello\"^^xsdt:hexBinary");
		}

		[TestMethod()]
		public void GetDataTypeTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

			Type t = typeof(string); // TODO: Initialize to an appropriate value

			XsdtPrimitiveDataType expected = XsdtPrimitiveDataType.XsdtString;
			XsdtPrimitiveDataType actual;

			actual = target.GetDataType(t);

			Assert.AreEqual(expected, actual, "LinqToRdf.XsdtTypeConverter.GetDataType did not return the expected value.");
		}

		[DeploymentItem("linqtordf.dll")]
		[TestMethod()]
		public void GetXsdtAttrForTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

			RdfSerialisationTest.LinqToRdf_XsdtTypeConverterAccessor accessor = new RdfSerialisationTest.LinqToRdf_XsdtTypeConverterAccessor(target);

			XsdtPrimitiveDataType dt = XsdtPrimitiveDataType.XsdtString; // TODO: Initialize to an appropriate value

			XsdtAttribute expected = new XsdtAttribute(true, "string");
			XsdtAttribute actual;

			actual = accessor.GetXsdtAttrFor(dt);

			Assert.AreEqual(expected, actual, "LinqToRdf.XsdtTypeConverter.GetXsdtAttrFor did not return the expected value.");
		}

		[DeploymentItem("linqtordf.dll")]
		[TestMethod()]
		public void GetXsdtDateRepresentationForTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

			RdfSerialisationTest.LinqToRdf_XsdtTypeConverterAccessor accessor = new RdfSerialisationTest.LinqToRdf_XsdtTypeConverterAccessor(target);

			DateTime d = new DateTime(2007,10,17,19,42,01); // TODO: Initialize to an appropriate value

			XsdtPrimitiveDataType dt = XsdtPrimitiveDataType.XsdtDateTime; // TODO: Initialize to an appropriate value

            XsdtAttribute attr = new XsdtAttribute(true, "dateTime"); // TODO: Initialize to an appropriate value

			string expected = "2007-10-17T19:42:01+10:00";
			string actual;

			actual = accessor.GetXsdtDateRepresentationFor(d, dt, attr);

			Assert.AreEqual(expected, actual, "LinqToRdf.XsdtTypeConverter.GetXsdtDateRepresentationFor did not return the expec" +
					"ted value.");
		}

		[TestMethod()]
		public void TypeLookupTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

			System.Collections.Generic.Dictionary<System.Type, LinqToRdf.XsdtPrimitiveDataType> val = new Dictionary<Type,XsdtPrimitiveDataType>(); // TODO: Assign to an appropriate value for the property

			target.TypeLookup = val;


			Assert.AreEqual(val, target.TypeLookup, "LinqToRdf.XsdtTypeConverter.TypeLookup was not set correctly.");
		}

		[TestMethod()]
		public void ConstructorTest()
		{
			XsdtTypeConverter target = new XsdtTypeConverter();

            Assert.IsNotNull(target);
            Assert.IsNotNull(target.TypeLookup);
		}

	}


}
